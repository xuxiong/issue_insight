{
  "repository": {
    "owner": "github",
    "name": "spec-kit",
    "url": "https://github.com/github/spec-kit",
    "api_url": "https://api.github.com/repos/github/spec-kit",
    "is_public": true,
    "default_branch": "main"
  },
  "issues_count": 100,
  "issues": [
    {
      "id": 3538738027,
      "number": 1000,
      "title": "It will start writing docker-compose files in plan stage",
      "body": "in opencode against grok-code\n\n/speckit.consitition \n/speckit.specify create a docker compose file to run timescaledb\n/speckit.plan create a docker compose file to run timescaledb in a 3 node cluster mode. One master and two replications. save data to current directory.\n\n\n",
      "state": "open",
      "created_at": "2025-10-22 01:35:05",
      "updated_at": "2025-10-22 01:35:05",
      "closed_at": null,
      "author": {
        "id": 429211,
        "username": "tlightsky",
        "display_name": "tlightsky",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3538517777,
      "number": 997,
      "title": "How to inject already designed UI",
      "body": "how can i go about this?",
      "state": "closed",
      "created_at": "2025-10-21 23:32:53",
      "updated_at": "2025-10-21 23:34:17",
      "closed_at": "2025-10-21 23:34:17",
      "author": {
        "id": 114490337,
        "username": "Vopwe",
        "display_name": "Vopwe",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3538481889,
      "number": 995,
      "title": "We Need Detailed Release Notes!",
      "body": "The release notes and Changelog are too generic and lack useful update details. Without a clear history, users can't track project changes.\n\nDetailed documentation is crucial: it builds trust, promotes updating, and simplifies troubleshooting.\n\nPlease standardize releases with clear notes and a complete, functional Changelog for every version. Thanks!",
      "state": "closed",
      "created_at": "2025-10-21 23:13:29",
      "updated_at": "2025-10-21 23:31:37",
      "closed_at": "2025-10-21 23:31:37",
      "author": {
        "id": 952447,
        "username": "HudsonAfonso",
        "display_name": "HudsonAfonso",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3429926489,
          "body": "Thanks! Working on adding more details.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 23:31:35",
          "updated_at": "2025-10-21 23:31:35",
          "issue_id": 995
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3537536978,
      "number": 987,
      "title": "create-new-feature shell script is often called incorrectly",
      "body": "Very often when I try to use the `speckit.specify` command it runs into the following pattern of incorrectly using the create-new-feature.sh script:\n\n---\nBased on your description, I'll use the short name: \"user-profile-page\"\n\n```bash\n.specify/scripts/bash/create-new-feature.sh --json \"I would like to add a profile page to the application, this should be reachable from the account menu, and should only be visible when logged in. I would like to see my username, email there, and have the option to delete my account, change my password, change my username and see some simple stats such as Date of joining.\" --short-name \"user-profile-page\"\n```\n\nLet me correct the command syntax:\n\n```bash\n.specify/scripts/bash/create-new-feature.sh --json \"I would like to add a profile page to the application, this should be reachable from the account menu, and should only be visible when logged in. I would like to see my username, email there, and have the option to delete my account, change my password, change my username and see some simple stats such as Date of joining.\" --short-name user-profile-page\n```\n\nLet me check the script to understand its syntax:\n\n```bash\nRead create-new-feature.sh\n```\n\nI see the issue. The arguments need to be in a specific order. Let me try again:\n\n```bash\n.specify/scripts/bash/create-new-feature.sh --json --short-name user-profile-page \"I would like to add a profile page to the application, this should be reachable from the account menu, and should only be visible when logged in. I would like to see my username, email there, and have the option to delete my account, change my password, change my username and see some simple stats such as Date of joining.\"\n```\n\nPerfect!\n---\n\nThis could be easily fixed if the prompt is changed to properly explain how the shell script works. I have noticed this mostly with Claude Sonnet 4.5, but also experienced this with GPT-5 mini. Also with Copilot, as well as Claude Code.",
      "state": "closed",
      "created_at": "2025-10-21 17:35:56",
      "updated_at": "2025-10-22 02:28:27",
      "closed_at": "2025-10-22 02:28:27",
      "author": {
        "id": 13336004,
        "username": "Brandsma",
        "display_name": "Brandsma",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        },
        {
          "id": 9295705533,
          "name": "templates",
          "color": "e3aa01",
          "description": "Related to template definition and not the CLI."
        }
      ],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3535801327,
      "number": 979,
      "title": "Increasing AI Determinism",
      "body": "I assume that \"freezing\" the model, version, and parameters would increase determinism in AI-generated implementation.\n\n1. Am I correct?\n2. Is there a way, (or planned way) to freeze these parameters into the spec? Or is this something I can put in the constitution and the AI will respect?",
      "state": "closed",
      "created_at": "2025-10-21 09:48:16",
      "updated_at": "2025-10-21 23:06:17",
      "closed_at": "2025-10-21 23:06:17",
      "author": {
        "id": 1248329,
        "username": "kahunacohen",
        "display_name": "kahunacohen",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3535541842,
      "number": 978,
      "title": "installing when told me typer was not found in the package registry",
      "body": "when i run the uv tool install specify-cli --from git+https://github.com/github/spec-kit.git\nit told me :\nNo solution found when resolving dependencies:\n  \u2570\u2500\u25b6 Because typer was not found in the package registry and specify-cli==0.0.20 depends on typer, we can conclude\n      that specify-cli==0.0.20 cannot be used.\n      And because only specify-cli==0.0.20 is available and you require specify-cli, we can conclude that your\n      requirements are unsatisfiable.\nbut i have pip install typer and i can import typer .",
      "state": "open",
      "created_at": "2025-10-21 08:33:11",
      "updated_at": "2025-10-21 19:48:26",
      "closed_at": null,
      "author": {
        "id": 28283200,
        "username": "sheneven",
        "display_name": "sheneven",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9247173061,
          "name": "needs-author-response",
          "color": "dd6b1d",
          "description": ""
        },
        {
          "id": 9261375035,
          "name": "needs-verification",
          "color": "B95D4A",
          "description": "Pull request or bug report that requires validation and testing before it can be acted on."
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3429277896,
          "body": "I ran this both on Windows and Linux and cannot reproduce the issue.\n\n@sheneven - are you using some custom registries or are behind a corporate firewall/proxy?\n\n<img width=\"1608\" height=\"400\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c9c94584-bdc8-4e46-8f91-1783390f0958\" />\n\n<img width=\"2277\" height=\"333\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b9277397-a7c2-4953-ad67-a0134c8b97cb\" />",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 19:48:16",
          "updated_at": "2025-10-21 19:48:16",
          "issue_id": 978
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3534943577,
      "number": 977,
      "title": "Support for Copilot CLI",
      "body": "It would be great to have Github Copilot CLI support for spec-kit.\n\nI can see the VS Code Copilot Chat interface is having spec-kit commands, where as the Copilot CLI does not have those.\n\n<img width=\"2179\" height=\"355\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f76fe23f-742d-495c-9416-72d74695afca\" />",
      "state": "closed",
      "created_at": "2025-10-21 05:30:17",
      "updated_at": "2025-10-21 19:46:40",
      "closed_at": "2025-10-21 19:46:40",
      "author": {
        "id": 696662,
        "username": "anidotnet",
        "display_name": "anidotnet",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3427358196,
          "body": "it seem like a duplicate question from #601 , please kindly look at https://www.youtube.com/watch?v=7tjmA_0pl2c video for more insight.",
          "author": {
            "id": 9159452,
            "username": "isdaniel",
            "display_name": "isdaniel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 15:48:50",
          "updated_at": "2025-10-21 15:48:50",
          "issue_id": 977
        },
        {
          "id": 3429262634,
          "body": "Indeed, this is a GitHub Copilot CLI issue - they currently do not support custom slash commands. @isdaniel linked to my video on this I recommend checking out - you can still use it, but it won't be as smooth.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 19:46:37",
          "updated_at": "2025-10-21 19:46:37",
          "issue_id": 977
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3534802954,
      "number": 976,
      "title": "Add trae.ai IDEA Support",
      "body": "### The Spec Kit currently supports multiple AI coding agents including Cursor, Kilo Code, and Roo Code, but not support for trae.ai IDEA integration.\n\nRequest:\nAdd trae.ai to the list of supported AI agents with:\n\nEntry in the \"Supported AI Agents\" table\n--ai trae flag support in specify init\nAppropriate configuration templates\n\nRationale:\ntrae.ai is gaining adoption as an AI-powered IDE, and adding support would:\n\nMaintain feature parity with similar IDEs already supported\nExpand accessibility for trae.ai users\nAlign with Spec Kit's goal of broad AI agent compatibility\n\n<img width=\"1200\" height=\"630\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/b1912244-cdbb-4bc2-aef2-24752a5bf3c6\" />",
      "state": "closed",
      "created_at": "2025-10-21 04:15:07",
      "updated_at": "2025-10-21 19:45:05",
      "closed_at": "2025-10-21 19:45:05",
      "author": {
        "id": 102300949,
        "username": "Tenith01",
        "display_name": "Tenith01",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3429249549,
          "body": "Duplicate of #240",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 19:45:03",
          "updated_at": "2025-10-21 19:45:03",
          "issue_id": 976
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3534621484,
      "number": 975,
      "title": "Potential bug with the create-new-feature.ps1 script that ignores existing feature branches when determining next feature number",
      "body": "## Description\n\nThe PowerShell script `.specify/scripts/powershell/create-new-feature.ps1` only checks the `specs/` directory on the current branch to determine the next feature number, but does not check existing branch names. This causes numbering conflicts when working with multiple feature branches that haven't been merged to main.\n\n## Expected Behavior\n\nWhen running the script from `main`, it should:\n1. Check the `specs/` directory for existing spec folders with pattern `\\d{3}-*`\n2. **Also check `git branch` output for existing branches with pattern `\\d{3}-*`**\n3. Use the highest number found from either source\n4. Increment by 1 to determine the next feature number\n\n## Current Behavior\n\nThe script only checks step 1 (specs directory on current branch). If feature branches exist but haven't been merged to main, the script will reuse feature numbers, creating conflicts.\n\n## Reproduction Steps\n\n1. Initialize a new spec-kit project\n2. From `main` branch, run the script to create feature 001:\n   ```powershell\n   .\\.specify\\scripts\\powershell\\create-new-feature.ps1 -ShortName \"first-feature\"\n   ```\n   - Creates branch `001-first-feature`\n   - Creates `specs/001-first-feature/` directory\n3. Push branch `001-first-feature` to remote (do NOT merge to main)\n4. Checkout `main` again\n5. Run the script to create feature 002:\n   ```powershell\n   .\\.specify\\scripts\\powershell\\create-new-feature.ps1 -ShortName \"second-feature\"\n   ```\n\n**Expected**: Creates branch `002-second-feature`  \n**Actual**: Creates branch `001-second-feature` (reuses 001)\n\n## Root Cause\n\nLooking at lines 82-92 of `create-new-feature.ps1`:\n\n```powershell\n$existingSpecs = Get-ChildItem -Path $specsDir -Directory -ErrorAction SilentlyContinue |\n    Where-Object { $_.Name -match '^\\d{3}' } |\n    ForEach-Object {\n        if ($_.Name -match '^(\\d{3})') {\n            [int]$matches[1]\n        }\n    } |\n    Sort-Object -Descending |\n    Select-Object -First 1\n```\n\nThe script only checks directories in `$specsDir`, not branch names via `git branch`.\n\n## Suggested Fix\n\nAdd branch checking logic before determining feature number:\n\n```powershell\n# Get highest number from specs directory\n$existingSpecs = Get-ChildItem -Path $specsDir -Directory -ErrorAction SilentlyContinue |\n    Where-Object { $_.Name -match '^\\d{3}' } |\n    ForEach-Object {\n        if ($_.Name -match '^(\\d{3})') {\n            [int]$matches[1]\n        }\n    } |\n    Sort-Object -Descending |\n    Select-Object -First 1\n\n# Get highest number from branch names\n$existingBranches = git branch -a | \n    ForEach-Object { $_.Trim() -replace '^\\*?\\s+', '' -replace '^remotes/origin/', '' } |\n    Where-Object { $_ -match '^\\d{3}-' } |\n    ForEach-Object {\n        if ($_ -match '^(\\d{3})') {\n            [int]$matches[1]\n        }\n    } |\n    Sort-Object -Descending |\n    Select-Object -First 1\n\n# Use the highest number from either source\n$highestExisting = [Math]::Max(\n    $(if ($existingSpecs) { $existingSpecs } else { 0 }),\n    $(if ($existingBranches) { $existingBranches } else { 0 })\n)\n\n$featureNumber = $highestExisting + 1\n```\n\n## Workaround\n\nUntil fixed, merge spec directories to `main` after creating each feature branch, so the next run can see the previous feature number in the specs directory.\n\n## Environment\n\n- **OS**: Windows 11\n- **PowerShell Version**: 7.5.4\n- **spec-kit**: v0.0.20",
      "state": "open",
      "created_at": "2025-10-21 02:45:00",
      "updated_at": "2025-10-21 23:06:39",
      "closed_at": null,
      "author": {
        "id": 2119614,
        "username": "fgalarraga",
        "display_name": "fgalarraga",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [
        {
          "id": 9295705533,
          "name": "templates",
          "color": "e3aa01",
          "description": "Related to template definition and not the CLI."
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3424510678,
          "body": "## \u2705 Fix Verified and Tested\n\nI can confirm the proposed fix works correctly! Here are the test results:\n\n### Test Setup\n\n1. Applied the suggested fix to `create-new-feature.ps1` (checking both specs/ directory AND git branches)\n2. Committed the fix to a `fix/branch-numbering-detection` branch\n3. Merged the fix to `main` branch\n4. Ran sequential feature creation tests\n\n### Test Results\n\n**Test 1 - Create First Feature:**\n```powershell\n# From main branch\n/speckit.specify -ShortName \"first-feature\" Create a test feature to verify branch numbering\n```\n- \u2705 Created branch: `001-first-feature`\n- \u2705 Committed and pushed to remote\n- \u2705 Returned to main branch\n\n**Test 2 - Create Second Feature (The Critical Test):**\n```powershell\n# From main branch (001-first-feature exists ONLY on remote, not merged to main)\n/speckit.specify -ShortName \"second-feature\" Create another test feature to verify incremental numbering\n```\n- \u2705 Created branch: `002-second-feature` (NOT `001-second-feature`)\n- \u2705 Correctly detected the existing `001-first-feature` branch on remote\n- \u2705 Incremented to `002` as expected\n\n### Fix Confirmation\n\nThe fix successfully:\n- \u2705 Detects existing feature branches from remote repository\n- \u2705 Prevents duplicate branch numbers\n- \u2705 Works correctly even when feature branches haven't been merged to main\n- \u2705 Checks both specs/ directory AND branch names\n- \u2705 Uses the highest number from either source\n\n### Implementation Details\n\nThe fix adds branch detection logic that:\n\n1. Scans all branches (local and remote) using `git branch -a`\n2. Strips remote prefixes (`remotes/origin/`)\n3. Extracts numeric prefixes matching `^\\d{3}-` pattern\n4. Compares highest number from branches vs. specs/ directory\n5. Uses `[Math]::Max()` to determine the starting point\n6. Increments by 1\n\n### Code Added\n\n```powershell\n# Get highest number from branch names\n$existingBranches = git branch -a | \n    ForEach-Object { $_.Trim() -replace '^\\*?\\s+', '' -replace '^remotes/origin/', '' } |\n    Where-Object { $_ -match '^\\d{3}-' } |\n    ForEach-Object {\n        if ($_ -match '^(\\d{3})') {\n            [int]$matches[1]\n        }\n    } |\n    Sort-Object -Descending |\n    Select-Object -First 1\n\n# Use the highest number from either source\n$highestExisting = [Math]::Max(\n    $(if ($existingSpecs) { $existingSpecs } else { 0 }),\n    $(if ($existingBranches) { $existingBranches } else { 0 })\n)\n\n$featureNumber = $highestExisting + 1\n```\n\nThis fix resolves the issue completely and enables the proper workflow of creating multiple feature branches in parallel without requiring merges to main for correct numbering.\n",
          "author": {
            "id": 2119614,
            "username": "fgalarraga",
            "display_name": "fgalarraga",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 03:16:12",
          "updated_at": "2025-10-21 03:16:12",
          "issue_id": 975
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3534235137,
      "number": 974,
      "title": "How ensure consistency of new specs and plans with the previous ones?",
      "body": "There are no clear instructions about how to develop with spec-kit when multiple features/specs are created over the time. It seems the method only works under the assumption that every spec is independent and iterations only happen in the context of a single spec. In big projects or incremental features, each new spec and plan does not consider the previous ones and lot of decisions are lost, breaking consistency across the project. \n\nI've attempted to address this problem by enhancing the /analyze command to validate\ncross-spec consistency. \n\nSample:\n\n```\n   - **Cross-spec inventory**: Build comprehensive index from all previous specs/plans:\n     - Component names and their responsibilities\n     - Data entities/models with their fields and types\n     - API patterns and conventions\n     - Technology choices and architectural patterns\n     - Shared interfaces, integration points, and dependencies between components\n     - Naming conventions and terminology used consistently across specs\n```\n\nBefore I invest more time in this approach, I wanted to ask:\n\n  1. Is this a known limitation that's on the roadmap?\n  2. Would a cross-spec validation feature align with spec-kit's design philosophy?\n  3. Are there alternative approaches you'd recommend?\n",
      "state": "closed",
      "created_at": "2025-10-20 23:07:11",
      "updated_at": "2025-10-21 19:51:41",
      "closed_at": "2025-10-21 19:51:41",
      "author": {
        "id": 86774347,
        "username": "Alex-Izquierdo",
        "display_name": "Alex-Izquierdo",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3533891346,
      "number": 971,
      "title": "Add `specify list-templates` to list available release template assets",
      "body": "Problem\n- When `specify init` fails to find a matching release asset (pattern `spec-kit-template-<ai>-<script>.zip`), the user sees an error panel listing available asset names, but there is no command to proactively discover what templates are available for a given AI or script type. This makes it harder to debug template availability and to automate template selection in scripts.\n\nWhy this helps\n- A `specify list-templates` command will let users and automation scripts discover available templates programmatically (or visually), filter by AI and script type, and optionally output machine-readable JSON for automation. This reduces trial-and-error and improves UX for both interactive and CI scenarios.\n\nProposed change\n1. Add a new `list-templates` subcommand to the CLI with the following behaviors:\n   - Default: query the latest GitHub release and print a human-friendly list of available assets (name, size, tag, download URL).\n   - Filters: `--ai <agent>` and `--script <sh|ps>` to filter assets by the naming convention.\n   - Output formats: `--format text|json` (default: text). JSON output returns a list of asset objects with fields: `name`, `size`, `tag`, `browser_download_url`.\n   - Exit code: non-zero when the GitHub API is unreachable or the repo has no releases.\n\n2. Implementation notes:\n   - Reuse `download_template_from_github` helper's logic for contacting GitHub releases, but only list assets (do not download).\n   - Respect the `--github-token` option or `GH_TOKEN`/`GITHUB_TOKEN` environment variables for authenticated requests.\n   - Rate-limit friendly: if API returns 429 or headers indicate low limits, display the rate-limit headers and guidance (cross-link to the rate-limit issue suggestion).\n\n3. CLI surface (examples):\n\n```bash\n# Show all templates (human readable)\nspecify list-templates\n\n# Filter for Claude POSIX templates (human readable)\nspecify list-templates --ai claude --script sh\n\n# Machine-friendly JSON output\nspecify list-templates --format json > templates.json\n```\n\nChain of thoughts: The command helps both users and CI. It is a read-only, low-risk addition that reuses existing HTTP logic.\n",
      "state": "open",
      "created_at": "2025-10-20 20:47:53",
      "updated_at": "2025-10-20 20:47:53",
      "closed_at": null,
      "author": {
        "id": 161755837,
        "username": "psmman",
        "display_name": "psmman",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3533884616,
      "number": 970,
      "title": "Add graceful fallback and logging for GitHub API rate-limiting during template fetch",
      "body": "Problem\n- `specify init` fetches release data and downloads assets from the GitHub Releases API. If the API rate-limits (or returns an unexpected status), the current error output can be terse and does not expose helpful headers like `X-RateLimit-Remaining`, `X-RateLimit-Reset`, or the `Retry-After` header. This makes diagnosing transient network or rate-limit issues harder for users and maintainers.\n\nWhy this helps\n- Displaying the relevant GitHub rate-limit headers and providing a sensible fallback makes failures easier to understand and act on. A fallback can also attempt a short backoff/retry for transient rate-limits and print the time when the client can retry based on `X-RateLimit-Reset`.\n\nProposed change\n1. Add header-aware error reporting in `download_template_from_github` (or the HTTP helper used) so that when a non-200 response is received, the error panel includes:\n   - `status_code` and brief reason (already present)\n   - `X-RateLimit-Limit` (if present)\n   - `X-RateLimit-Remaining` (if present)\n   - `X-RateLimit-Reset` (if present)-convert epoch seconds to a human-readable timestamp in the user's local timezone\n   - `Retry-After` (if present)\n\n2. If the response status indicates rate limiting (HTTP 429) or `X-RateLimit-Remaining` is `0`, implement a simple optional retry strategy:\n   - If `Retry-After` exists: sleep for that many seconds and retry once.\n   - Else if `X-RateLimit-Reset` exists: calculate time until reset; if <= 30 seconds, sleep and retry once; otherwise print a message advising the user to retry later (display reset time).\n   - Else: do not retry; surface an actionable error with header details and a troubleshooting hint.\n\n3. Improve user-facing message and troubleshooting panel to include the headers and a short guidance text such as:\n   - \"Tip: If you're on a shared CI or corporate environment, you may be rate-limited. Consider using a GitHub token via `--github-token` or the `GH_TOKEN`/`GITHUB_TOKEN` environment variable to increase rate limits.\"\n\n4. Optionally add a `--retry-on-rate-limit` flag to `specify init` (default: false) to allow users to opt-in to the automatic short retry behavior. The flag could be useful for automation contexts where waiting a few seconds is acceptable.\n\nSuggested patch outline\n- In `src/specify_cli/__init__.py` inside `download_template_from_github`:\n  - After receiving the HTTP response, capture `headers = response.headers`.\n  - On non-200, create a helpful `detail` string composed of the status and any present headers listed above.\n  - If status is 429 or `X-RateLimit-Remaining == '0'`, follow the retry decision tree described above.\n  - Use `rich.Panel` to display headers and guidance text when raising errors.\n\nTesting notes\n- Unit test: mock github API responses for the following cases and assert behavior/printed output:\n  - 200 OK (no change)\n  - 403 or 429 with `X-RateLimit-Remaining: 0` and `X-RateLimit-Reset` in near future (simulate retry path)\n  - 403 or 429 with `Retry-After` header (simulate retry path)\n  - 403 or 429 with no rate-limit headers (assert no retry and helpful error)\n- Integration test: run `download_template_from_github` against a local HTTP server that returns rate-limit headers to validate user-visible messages.\n\nYou can use this for additional documentation:\n- Keep retries conservative _(single short retry)_ to avoid long blocking behavior or masking larger rate-limit issues.\n- Prefer explicit guidance to using a GitHub token rather than silently retrying indefinitely.",
      "state": "open",
      "created_at": "2025-10-20 20:45:44",
      "updated_at": "2025-10-21 23:49:23",
      "closed_at": null,
      "author": {
        "id": 161755837,
        "username": "psmman",
        "display_name": "psmman",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 2,
      "comments": [
        {
          "id": 3429900489,
          "body": "I like the idea of adding concrete error messages about rate limits, but don't want to bake in too much logic for retries - that's not the purpose of the CLI, and if all goes south anyway might as well just download the templates from the repo directly and extract them in the folder.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 23:19:01",
          "updated_at": "2025-10-21 23:19:01",
          "issue_id": 970
        },
        {
          "id": 3429951808,
          "body": "That sounds good to me and thanks for linking it to #986 - appreciate that! ",
          "author": {
            "id": 161755837,
            "username": "psmman",
            "display_name": "psmman",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 23:49:23",
          "updated_at": "2025-10-21 23:49:23",
          "issue_id": 970
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3533870724,
      "number": 969,
      "title": "Improve README discoverability: add one-line \"run locally\" dev example (python -m src.specify_cli)",
      "body": "Problem\n- The README and docs already describe installation and usage, but the fastest way to try or iterate on the CLI during development - running it directly from the repo with `python -m src.specify_cli` - is only in `docs/local-development.md`. That makes the quick developer-run workflow harder to discover for contributors who open the README first.\n\nWhy this helps\n- A tiny, one-line example in the README makes it clear how to run the CLI immediately without installing or using `uvx`. This reduces friction for contributors and reviewers and helps people quickly validate local changes.\n\nProposed change\n- Add a short \"Developer run (no install)\" snippet under the \"Get Started\" section (or a small new subsection titled \"Run locally (dev)\") in `README.md`. The snippet should point to the two most useful commands: `--help` and a minimal `init` example.\n\nSuggested content to add:\n\n```markdown\n### Run locally (developer)\n\nIf you cloned the repo and want to try the CLI without installing it, run it from the repository root:\n\n```bash\npython -m src.specify_cli --help\n# example: initialize a demo project without agent checks\npython -m src.specify_cli init demo-project --ai claude --ignore-agent-tools --script sh\n```\n```\n\nNotes / Implementation details:\n- This is purely documentation - no code changes required.",
      "state": "open",
      "created_at": "2025-10-20 20:40:23",
      "updated_at": "2025-10-20 20:40:23",
      "closed_at": null,
      "author": {
        "id": 161755837,
        "username": "psmman",
        "display_name": "psmman",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3533815137,
      "number": 968,
      "title": "How and where to inject third-party documentation",
      "body": "Hi there, i'm testing this framework but need some advice.\n\nI have a 80k-100k tokens administration third-party documentation that I need to follow to integrate my web app with that public administration feature/system. This third party docs speaks about how to communicate with them, what fields you need to send, what protocol to use, what processes you need to follow to comply, how to deal with errors, etc. \n\nSo i'm not starting from just an idea, i'm starting from a third party documentation that i need to integrate in and already part-built project. \n\nMy problem is that I don't know what is the best practice to \"inject\" this documentation into spec-kit framework, i tried to just mention it using @thirdpartydocs.md when calling to /specify workflow but i'm not sure that it got all the details and created full specs based on docs ...\n\nAny advice here? \nthanks",
      "state": "closed",
      "created_at": "2025-10-20 20:21:21",
      "updated_at": "2025-10-21 23:25:42",
      "closed_at": "2025-10-21 23:25:42",
      "author": {
        "id": 2046424,
        "username": "afanjul",
        "display_name": "afanjul",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3533099355,
      "number": 966,
      "title": "Markdown for workflow preview",
      "body": "It seems we would use MarkDown for preview. So as we move through the flow, /specify > /plan > /tasks ... we have all these MarkDown docs, that do not properly preview in VSCode as the content is held in a mdc code block. This makes the doc not preview friendly.\n\nOne of the goals here is to practice good project workflow. If the artifacts are harder to read, the number of devs who actually take time to read will be lower.",
      "state": "open",
      "created_at": "2025-10-20 16:26:33",
      "updated_at": "2025-10-20 16:26:33",
      "closed_at": null,
      "author": {
        "id": 58905,
        "username": "sosensible",
        "display_name": "sosensible",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3532558007,
      "number": 965,
      "title": "Scripts REPO_ROOT variable issue",
      "body": "I've initialized spec-kit in a nested folder. When I run `/speckit.specify` it creates the `/specs` folder in the root of the repository instead of in the folder where I've initialized. \n\nWould it be a possibility to just default this to the folder where `/.specify` lives instead?",
      "state": "open",
      "created_at": "2025-10-20 13:58:01",
      "updated_at": "2025-10-20 13:58:01",
      "closed_at": null,
      "author": {
        "id": 30617100,
        "username": "koenvercauteren",
        "display_name": "koenvercauteren",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3531376997,
      "number": 962,
      "title": "Cline compatibility request",
      "body": "Good day, and thanks for the wonderful work.\nI wanted to ask whether spec-kit also supports Cline, just as Roo Code is supported. I have both Roo Code and Cline installed on my Windsurf and VSCode text editors.\nThank you,\nBest Regards",
      "state": "open",
      "created_at": "2025-10-20 07:32:51",
      "updated_at": "2025-10-20 07:32:51",
      "closed_at": null,
      "author": {
        "id": 94129113,
        "username": "Godswillconcept",
        "display_name": "Godswillconcept",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3530905075,
      "number": 960,
      "title": "Code gets messy and out of spec when specifications change continuously over a period of time",
      "body": "Working with processes that are often vague about specifications or where specifications change frequently is difficult to manage, such as agile, scum, etc., requiring a clear workflow when specifications change.",
      "state": "open",
      "created_at": "2025-10-20 03:30:24",
      "updated_at": "2025-10-20 03:30:24",
      "closed_at": null,
      "author": {
        "id": 169904122,
        "username": "ThuySinhNhat",
        "display_name": "ThuySinhNhat",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3530774121,
      "number": 959,
      "title": "Enhance support for brownfiled project.",
      "body": "I have tested spec-kit on brownfield project which includes both front-end and backend modules.\nTo be honest, it doesnt' work very well . \nMeanwhils there is another spec project ,openspec, which says it can handle brownfield project very well.\nI am think whether spec-kit project can do some enhancement on brown-field project.\nAny Plan ?",
      "state": "open",
      "created_at": "2025-10-20 02:13:02",
      "updated_at": "2025-10-21 01:29:33",
      "closed_at": null,
      "author": {
        "id": 1411754,
        "username": "tianlinzx",
        "display_name": "tianlinzx",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3423639327,
          "body": "@tianlinzx I am not a maintainer but in openspec they have a guards concept, that I have tried in the past and didn't particularly like. Personally I found speckit's concepts of constitution and progressive disclosure better. So, I have an enhancement filed in #967 that worked for me. because I was able to migrate my jenkins scripts, and add some more testing templetes that made cpeckit more reliable and quality gate more restrictive. If you have a sec, I would like some feedback on the PR, lmk, if there is anyideas. For brownfield I assume you already have some ci/cd controls that devs need to adhere to. Some of the problems can be solved by opencode and cursor that uses linting in meta data to help refine implementation.  ",
          "author": {
            "id": 24839871,
            "username": "RoyceLeonD",
            "display_name": "RoyceLeonD",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 20:37:06",
          "updated_at": "2025-10-20 20:37:06",
          "issue_id": 959
        },
        {
          "id": 3424323315,
          "body": "@RoyceLeonD I think we need several features\n1. Automatically write project documents whicn can be used to share context betweens different specs\n2. Different Agents for specific tasks. dev,test,qa ,etc.",
          "author": {
            "id": 1411754,
            "username": "tianlinzx",
            "display_name": "tianlinzx",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 01:29:32",
          "updated_at": "2025-10-21 01:29:32",
          "issue_id": 959
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3530450301,
      "number": 957,
      "title": "Powershell script issue.",
      "body": "When using the /specify command, if the args have any apostrophe for example (let's or can't) there is an issue when the underlying powershell script runs as shown below.\n\n<img width=\"378\" height=\"441\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a6d578f6-0137-4440-a7a5-2f48b2239c64\" />\n\nhad to remove the \"apostrophe\" for it to work correctly.\n\nIn one particular case when i was trying out the /specify command  to see resolve the \"apostrophe issue\" it directly jumped into implementing the the features without the following the routine (/specify ==> /clarify ==> /plan ==> /tasks ==> /implement).\n\n\nI am using the GPT-5 model for this.\n",
      "state": "open",
      "created_at": "2025-10-19 21:11:56",
      "updated_at": "2025-10-19 21:11:56",
      "closed_at": null,
      "author": {
        "id": 28514708,
        "username": "niranjan747",
        "display_name": "niranjan747",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3530064529,
      "number": 955,
      "title": "Problems with big codebases",
      "body": "Maybe I'm asking too much of it at the current momement but I have been trying to implement Java like JITed language with it. \n\nI partitioned tasks into phases\n \n* lexing/parsing\n* semantic analyzer with symbol table\n* IL generation\n* optimizations and conversion to SSA\n* JITing on the fly and executing\n\nI had no much success with Sonnet 4.5 it just got stuck on project setup, however GPT-5  Codex gotten through successfuly to 3rd phase. It was doing good until a project became a little bit unwieldy. \n\nI tried to poke it into right direction with addtional specifies and manually editing the specs, but it is not doing as good as in the beginning. I think I reached the project size limit for any AI to handle right now.\n\nSo I'm thinking maybe I will establish some interfaces for compiler to have plugin compatible phases and run speckit on each separately. \n\nFrom this experience I think it would be benfeficial to add some handling to partition spec work in separates on their own and handling them in something like pipeline with separate contexts / chats.",
      "state": "open",
      "created_at": "2025-10-19 13:15:17",
      "updated_at": "2025-10-21 12:17:33",
      "closed_at": null,
      "author": {
        "id": 2826778,
        "username": "dgawlik",
        "display_name": "dgawlik",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3423617940,
          "body": "Hey @dgawlik I am not a maintainer, but I had a similar issue. I have #967 out. Idk if it wil get merged, but If you want to try cloning speckit, installing my fork branch and lmk. I am not a strong java dev but I would like to get some feedback.",
          "author": {
            "id": 24839871,
            "username": "RoyceLeonD",
            "display_name": "RoyceLeonD",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 20:29:19",
          "updated_at": "2025-10-20 20:29:19",
          "issue_id": 955
        },
        {
          "id": 3426264488,
          "body": "> Hey [@dgawlik](https://github.com/dgawlik) I am not a maintainer, but I had a similar issue. I have [#967](https://github.com/github/spec-kit/pull/967) out. Idk if it wil get merged, but If you want to try cloning speckit, installing my fork branch and lmk. I am not a strong java dev but I would like to get some feedback.\n\nHey @RoyceLeonD, I took a look at your PR it looks like an interesting idea, I didn't understand everything though. I think that you partition steps during implementation with guards that enforce some generic (extendable I think) specifictions to sign off the part. I actually saw that errors cause the AI to peform better so error driven path maybe a good way to go in complex projects. For now I see that you integrated python checks I wonder how I could do the same for Java or C++?",
          "author": {
            "id": 2826778,
            "username": "dgawlik",
            "display_name": "dgawlik",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 12:06:16",
          "updated_at": "2025-10-21 12:17:33",
          "issue_id": 955
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3529885699,
      "number": 954,
      "title": "Add a specific prompt to make it easier to execute edits",
      "body": "So after /speckit.implement the agent runs and does something that needs to be edited. You tell it to edit it, but it doesn't focus on the original context of the spec. So if there is way to add a new prompt to edit after implementation, it would be very helpful ",
      "state": "open",
      "created_at": "2025-10-19 09:35:30",
      "updated_at": "2025-10-19 09:35:30",
      "closed_at": null,
      "author": {
        "id": 154366488,
        "username": "tarekiim20",
        "display_name": "tarekiim20",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3529297192,
      "number": 951,
      "title": "Spec Kit commands do not follow namespacing conventions in Claude Code",
      "body": "Claude Code expects namespaced commands to be in their own subdirectory and called with a `:` as a separator. Instead, Spec Kit put all the commands at the root of `.claude/commands`, and namespaced the commands with `.`\n\n## Current structure\n\n`.claude/commands/speckit.analyze.md`\n\nCalled with `/speckit.analyze` from Claude Code.\n\n\n## Expected structure\n\n`.claude/commands/speckit/analyze.md`\n\nCalled with `/speckit:analyze` from Claude Code.\n",
      "state": "open",
      "created_at": "2025-10-18 22:42:42",
      "updated_at": "2025-10-19 02:25:26",
      "closed_at": null,
      "author": {
        "id": 412,
        "username": "cmer",
        "display_name": "cmer",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3529018533,
      "number": 949,
      "title": "Confusing setup + instructions, eventual gap between prompts + check-prerequisites?",
      "body": "Hey!\n\nThis comes with a good amount of frustration and I'm aware that LLMs might interpret the given guidance from this repo differently. Still, I cannot seem to get this whole thing working correctly while following the rather simple steps the README gives me.\n\nI'll try to summarize this as succinct as possible.\n\n1. I'm running `specify init MY_FANCY_PROJECT`, choosing GitHub Copilot + SH (since I'm on a Mac), so the suggested defaults.\n2. I `cd MY_FANCY_PROJECT` and open `code .`\n3. I run `/speckit.constitution` with the prompt from the `README`, seems good enough for my taste.\n    - This is where things start to be weird \u2013 VS Code is not writing any files properly into the system? So I update the `constitution.md` file by hand\n4. I run `/speckit.specify` with a short prompt for what I want to build \u2013 Copilot gives me some Markdown output but again is not writing any files. It also doesn't tell me where that content (which looks good!) should/could be placed at all.\n5. I am now _utterly_ confused as to which files should have been created, which files are plain wrong or in the wrong place and how the general structure should look like.\n\nI had expected the structure to be set in such a way that the creation of these Markdown files would be *clear* and somehow _enforced_ (I know that is a very vague thing with LLMs, but still\u2026)\n\nAlso, I had already spent a whole afternoon creating these files in a previous run \u2013 the commands happily put everything into `.specify/features/\u2026` until I ran the `implement` bit, the `check-prerequisites.sh` script ran and complained about finding nothing in `specs/001-feature-\u2026` and I was honestly dumbfounded by this sudden hard requirement of a certain folder at a certain level. Where did this come from? Why did the LLM not pick up on this in more than 5 `speckit.analyze` runs? I also tried placing all files into that folder structure, but then the prerequisites complained about a missing `plan.md` and I was equally confused as to why THAT file was not created.\n\nI guess I'm somehow \"holding it wrong\", but these were a few VERY frustrating hours I spent on trying to get this to run. Sorry for venting, but\u2026 I followed the `README` \"Get started\" bit by the book and got\u2026 well, nothing? Which is quite disappointing. So either I missed some crucial bit, VS Code/Copilot is unable to handle this whole thing correctly or create files correctly OR something is off with the prerequisites check vs where the files are placed?\n\nI know this is more venting than an easy to pin down bug issue, but\u2026 HALP? \ud83d\ude2c ",
      "state": "closed",
      "created_at": "2025-10-18 17:25:11",
      "updated_at": "2025-10-18 19:05:09",
      "closed_at": "2025-10-18 17:54:48",
      "author": {
        "id": 1827373,
        "username": "HerrBertling",
        "display_name": "HerrBertling",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3418701751,
          "body": "Okay, I'm about 30 minutes into doing this with ClaudeCode and it quite apparently puts everything into the right folders and provides the correct structure. Guess I'll continue with that setup, then\u2026 closing here because it's not \"you\", it apparently is VSCode/Copilot \ud83e\udd37 ",
          "author": {
            "id": 1827373,
            "username": "HerrBertling",
            "display_name": "HerrBertling",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 17:54:48",
          "updated_at": "2025-10-18 19:05:09",
          "issue_id": 949
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3529006743,
      "number": 948,
      "title": "publish to npm",
      "body": "would be nice to have it published to npm?",
      "state": "closed",
      "created_at": "2025-10-18 17:09:17",
      "updated_at": "2025-10-19 01:33:23",
      "closed_at": "2025-10-19 01:33:23",
      "author": {
        "id": 4012422,
        "username": "da1z",
        "display_name": "da1z",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419124815,
          "body": "It will be published to PyPI soon, since this is a Python project.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 01:33:22",
          "updated_at": "2025-10-19 01:33:22",
          "issue_id": 948
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3528594027,
      "number": 944,
      "title": "Generate AsyncAPI spec for event-driven architecture",
      "body": "## Overview\n\nThe `/speckit.plan` command does a great job generating structured, machine-readable specifications for REST and GraphQL APIs:\n\n- **REST APIs**: Generates OpenAPI specifications (`/contracts/openapi.yaml`)\n- **GraphQL APIs**: Generates GraphQL schema definitions (`/contracts/graphql.schema`)\n\nHowever, **event-driven APIs are missing out on this standardization**. Currently, async communication patterns (Kafka, WebSocket, message queues, webhooks, etc.) are documented only as markdown files with embedded JSON Schema snippets.\n\n## The Problem with Markdown-Only Documentation\n\nWhen documenting event-driven APIs in markdown:\n\n- **Topic/channel names are buried in prose** - not formally defined as structured elements\n- **Publish vs subscribe operations are ambiguous** - no clear distinction of message flow direction\n- **Protocol bindings are unclear** - Kafka-specific vs AMQP vs WebSocket details mixed in text\n- **Inconsistent developer experience** - REST gets structured specs, events get markdown\n\n### Current State\n\n```\n/speckit.plan with Kafka-based feature\n\nGenerated:\n\u251c\u2500\u2500 /contracts/openapi.yaml          \u2713 Structured, validated, tooling-rich\n\u2514\u2500\u2500 /contracts/messaging.md          \u2717 Prose with JSON Schema snippets\n```\n\nAt times, it does not even create this markdown file, it just inlines the details in data-model.\n\n## Request: Add [AsyncAPI Specification](https://www.asyncapi.com/) Support\n\n[AsyncAPI](https://www.asyncapi.com/) is the industry-standard specification for event-driven APIs. it is the async equivalent of OpenAPI for REST APIs.\n\nGenerate AsyncAPI specifications (`/contracts/asyncapi.yaml`) for event-driven communication patterns, bringing the same level of structure and standardization to async APIs.\n\n### Benefits\n\n1. **Standardization** - Use industry-standard AsyncAPI spec (Linux Foundation project)\n2. **Consistency** - Event-driven APIs get the same structured treatment as REST and GraphQL\n3. **Clear definitions** - Formal channel/topic structure, explicit publish/subscribe operations\n4. **Better developer experience** - Machine-readable format for both sync and async APIs\n\n### Expected Outcome\n\n```\n/speckit.plan with Kafka-based feature\n\nGenerated:\n\u251c\u2500\u2500 /contracts/openapi.yaml          \u2713 REST API specification\n\u2514\u2500\u2500 /contracts/asyncapi.yaml         \u2713 Event-driven API specification\n    \u2514\u2500\u2500 Contains:\n        - Formal channel/topic definitions\n        - Operations\n        - Message schemas (JSON Schema)\n        - Protocol bindings (Kafka, WebSocket, etc.)\n```\n\nThis brings event-driven APIs to parity with REST and GraphQL, ensuring all API types benefit from structured specifications.\n\n## Disclosure\n\nI am an [Ambassador](https://www.asyncapi.com/community/ambassadors/harikrishnan83) at [AsyncAPI](https://www.asyncapi.com/) and contribute by promoting and advancing the adoption of AsyncAPI specification in the developer community.",
      "state": "open",
      "created_at": "2025-10-18 10:39:35",
      "updated_at": "2025-10-21 01:47:14",
      "closed_at": null,
      "author": {
        "id": 126087,
        "username": "harikrishnan83",
        "display_name": "harikrishnan83",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 5,
      "comments": [
        {
          "id": 3419151474,
          "body": "This feels hyper-specific to a domain. I wonder if we can segment this better with some area-specific prompts that developers can use instead of a one-size-fits-all.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 02:27:08",
          "updated_at": "2025-10-19 02:27:08",
          "issue_id": 944
        },
        {
          "id": 3419163225,
          "body": "> This feels hyper-specific to a domain. I wonder if we can segment this better with some area-specific prompts that developers can use instead of a one-size-fits-all.\n\nThanks for your response @localden.\n\nBy hyper-specific, are you referring to a particular group of interactions like messaging via Kafka, MQTT, etc. in that case I am wondering if we should then say that when ever we see terms like these in the argument to '/speckit.plan' command, we can use AsyncAPI.\n\nThat said AsyncAPI is to async like OpenAPI is to REST. Just trying to understand why this looks too domain specific.\n\nRegards.",
          "author": {
            "id": 126087,
            "username": "harikrishnan83",
            "display_name": "harikrishnan83",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 02:53:26",
          "updated_at": "2025-10-19 03:31:40",
          "issue_id": 944
        },
        {
          "id": 3419448260,
          "body": "> This feels hyper-specific to a domain. I wonder if we can segment this better with some area-specific prompts that developers can use instead of a one-size-fits-all.\n\nAdding to the above.\n\nI believe I may have already addressed the concern you are describing in my [PR](https://github.com/github/spec-kit/pull/946):\n\n1. **Automatic detection** ([L73 in plan.md](https://github.com/github/spec-kit/blob/53ad49bb4dbce369fa3fe45f4f26aac4e63a4eeb/templates/commands/plan.md?plain=1#L73)): We detect async/event-driven patterns (Kafka, MQTT, WebSockets, etc.) in the codebase and only generate AsyncAPI specs when these patterns are present.\n\n2. **Clarification for ambiguous cases** ([L77 in plan.md](https://github.com/github/spec-kit/blob/53ad49bb4dbce369fa3fe45f4f26aac4e63a4eeb/templates/commands/plan.md?plain=1#L77)): If it is still unclear whether async patterns exist, the tool asks the user for clarification rather than making assumptions.\n\nThis means AsyncAPI generation is triggered contextually based on what is actually in the codebase, just like OpenAPI is generated when REST endpoints are detected.\n\nWould love your feedback on whether this approach addresses your concern!\n\nThanks again.",
          "author": {
            "id": 126087,
            "username": "harikrishnan83",
            "display_name": "harikrishnan83",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 08:56:51",
          "updated_at": "2025-10-19 08:56:51",
          "issue_id": 944
        },
        {
          "id": 3423682878,
          "body": "@harikrishnan83 I see the problem, generally markdown front matter is how you solve this. I think overall, mdx would be a good move for the repo, but I don't thing this structure is right. based on what I am reading you have 2 problems:\n1. md is not structured enough to be a quality gate. I had same problem #967 is my opinion on solving it.\n2. In order to plan and complete a task well, you need an ecosystem to retrieve relevant info about the technology, about the implementation, validate assumptions, etc. And so a flat-file db allows you to orgranize spec->plan->implment in a much more observable way. rather than the freedom of open ended markdown. That seems like a good evolution but maybe it is too soon. Ideally, we let MCP adoption increase, we let agentic dev containers standardize and let other parts of the ecosystem gain polish, then we can naturally pivot to that, and have stronger opinions",
          "author": {
            "id": 24839871,
            "username": "RoyceLeonD",
            "display_name": "RoyceLeonD",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 20:53:35",
          "updated_at": "2025-10-20 20:53:35",
          "issue_id": 944
        },
        {
          "id": 3424343510,
          "body": "> [@harikrishnan83](https://github.com/harikrishnan83) I see the problem, generally markdown front matter is how you solve this. I think overall, mdx would be a good move for the repo, but I don't thing this structure is right. based on what I am reading you have 2 problems:\n> \n> 1. md is not structured enough to be a quality gate. I had same problem [Feat: Deterministic Repeatable Guards with Progressive disclosure though CLI driven Opperation\u00a0#967](https://github.com/github/spec-kit/pull/967) is my opinion on solving it.\n> 2. In order to plan and complete a task well, you need an ecosystem to retrieve relevant info about the technology, about the implementation, validate assumptions, etc. And so a flat-file db allows you to orgranize spec->plan->implment in a much more observable way. rather than the freedom of open ended markdown. That seems like a good evolution but maybe it is too soon. Ideally, we let MCP adoption increase, we let agentic dev containers standardize and let other parts of the ecosystem gain polish, then we can naturally pivot to that, and have stronger opinions\n\nThanks for the detailed context on guards @RoyceLeonD, I had a look at your PR your validation infrastructure looks interesting!\n\nI want to clarify the scope of [this issue](https://github.com/github/spec-kit/issues/944) and [PR](https://github.com/github/spec-kit/pull/946), as I think we might be conflating two separate concerns.\n\n---\n\n**The scope for issue #944 and related PR #946** - Bringing parity to what API artifacts spec-kit generates during the `/plan` stage\n- **Sync APIs:** OpenAPI (REST), GraphQL schemas \u2713\n- **Async APIs:** AsyncAPI specs \u2717 (currently just markdown)\n\n---\n\n**Why AsyncAPI (not markdown front matter):**\n[AsyncAPI](https://www.asyncapi.com/) is the industry standard for event-driven APIs ([Linux Foundation project](https://www.linuxfoundation.org/press/press-release/linux-foundation-will-host-asyncapi-to-support-growth-and-collaboration-for-industrys-fastest-growing-api-spec), mature tooling ecosystem). Using markdown front matter would mean reinventing the wheel when a widely-adopted standard already exists. It is not about markdown vs. structure, it is about using the right standard for the job, just like we use OpenAPI for REST rather than inventing our own format.\n\n**How this issue and PR may relate to your guards:**\nValidation (guards) is a *downstream* concern that happens after specs are in place. My PR focuses on *what* spec files are created during planning, not *how* they are validated afterward.\n\nI appreciate the broader architectural vision, but I want to keep this issue and PR focused on the parity issue - ensuring event-driven APIs get the same structured specification treatment that REST and GraphQL already receive.\n\nDoes that clarify the scope?",
          "author": {
            "id": 126087,
            "username": "harikrishnan83",
            "display_name": "harikrishnan83",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 01:44:14",
          "updated_at": "2025-10-21 01:47:14",
          "issue_id": 944
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3528209996,
      "number": 942,
      "title": "Feature Request: Add Support for Continue VS Code Extension",
      "body": "It would be great to add support for the [Continue VS Code extension](https://github.com/continuedev/continue)\n. Continue is an open-source AI code assistant that integrates seamlessly into the VS Code environment, providing inline code suggestions, refactoring help, and AI-driven completions.\n\nReferences\n\nContinue GitHub: https://github.com/continuedev/continue\n\nDocs: https://docs.continue.dev",
      "state": "open",
      "created_at": "2025-10-18 06:56:33",
      "updated_at": "2025-10-19 05:41:31",
      "closed_at": null,
      "author": {
        "id": 11486913,
        "username": "rohitsoni-dev",
        "display_name": "rohitsoni-dev",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9247173061,
          "name": "needs-author-response",
          "color": "dd6b1d",
          "description": ""
        },
        {
          "id": 9261375035,
          "name": "needs-verification",
          "color": "B95D4A",
          "description": "Pull request or bug report that requires validation and testing before it can be acted on."
        }
      ],
      "comment_count": 2,
      "comments": [
        {
          "id": 3419151784,
          "body": "Do they have custom slash commands? If not, then we can't support them, unfortunately.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 02:27:51",
          "updated_at": "2025-10-19 02:27:51",
          "issue_id": 942
        },
        {
          "id": 3419234997,
          "body": "@localden yes they have custom slash commands. i have tested it, it works, \n\n<img width=\"288\" height=\"501\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/989974d0-d295-444e-b664-f86d818c802a\" />\n\ni have done code and also created a pull request to add this feature",
          "author": {
            "id": 11486913,
            "username": "rohitsoni-dev",
            "display_name": "rohitsoni-dev",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 05:41:31",
          "updated_at": "2025-10-19 05:41:31",
          "issue_id": 942
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3527970317,
      "number": 938,
      "title": "\"specs\" directory is not created in same level as \".specify\" directory when .git is on a different directory",
      "body": "after executing `specify init .` and running the constitution script, the specify command creates the `specs/` directory in the ../ directory. This happens because I have the .git in ../.git path but it feels unexpected because it already has a .specify directory\n\nExample:\n\nFirst, I have this initial multiproject structure:\n\nmultiproject/.git\nmultiproject/project1/script1.sh\nmultiproject/project1/README.md\nmultiproject/project2/README.md\n\nThen, I run the `specify init .` and the constitution script, all inside the project2 directory:\n\nmultiproject/.git\nmultiproject/project1/script1.sh\nmultiproject/project1/README.md\nmultiproject/project2/.specify (new directory)\nmultiproject/project2/.cursor(new directory)\nmultiproject/project2/README.md\n\nThen, when I run the specify cursor command (previously project was open in cursor using `cursor project1` command), it creates the specs/ directory in an unexpected place:\n\nmultiproject/.git\nmultiproject/project1/script1.sh\nmultiproject/project1/README.md\nmultiproject/project2/.specify\nmultiproject/project2/.cursor\nmultiproject/project2/README.md\nmultiproject/specs/ (new directory)\n\nI think because it is finding the .git directory so it thinks that is the correct place, but I think .specify should have priority over .git\n\n\n\n",
      "state": "open",
      "created_at": "2025-10-18 02:25:53",
      "updated_at": "2025-10-19 02:28:29",
      "closed_at": null,
      "author": {
        "id": 13511768,
        "username": "leobrines",
        "display_name": "leobrines",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3527589643,
      "number": 935,
      "title": "Feature branch and folder prefix should not be sequencial, it does not scale",
      "body": "Let's say we work in a team with 8 developers, and every day we get at least 8 features created, there is a high chance we will end up with same prefix multiple times.\n\nThe users should be able to change this behavior specifying a feature code, such as the number of the \"board\" feature, or spic, or GH issue, or feature request code... I think the idea is clear.",
      "state": "open",
      "created_at": "2025-10-17 21:16:40",
      "updated_at": "2025-10-19 02:29:01",
      "closed_at": null,
      "author": {
        "id": 20674439,
        "username": "wilsonneto-swe",
        "display_name": "wilsonneto-swe",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3417411560,
          "body": "Other options would be instead of a sequencial number a kind of encoded date such as `20251017-feature-short-name`, it would preserve the sequential benefit and avoid the confusion of having conflicting prefix such as `002-feature-a` and `002-another-feature-not-related-to-a` that causes confusion and doesn't link to any other company artifact.\n\nExample of the caused confusion:\n- \"What is this 002?\" \n- \"What is the relation between these two features as both have the same prefix 002?\"\n- \"Does this prefix relates to any other company artifact?\"",
          "author": {
            "id": 20674439,
            "username": "wilsonneto-swe",
            "display_name": "wilsonneto-swe",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 22:22:29",
          "updated_at": "2025-10-17 22:22:29",
          "issue_id": 935
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3526639314,
      "number": 928,
      "title": "Usging external UI design",
      "body": "Hi,\n\nI want to ui design from external tools.\nHow can I do this?\n\nRegards.",
      "state": "closed",
      "created_at": "2025-10-17 15:46:19",
      "updated_at": "2025-10-17 17:45:00",
      "closed_at": "2025-10-17 17:45:00",
      "author": {
        "id": 57163914,
        "username": "hsk20011",
        "display_name": "hsk20011",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3526163479,
      "number": 926,
      "title": "Speckit doesn't work in Cursor 1.7.46",
      "body": "Using either `uv tool install specify-cli --from git+https://github.com/github/spec-kit.git` or `uvx --from git+https://github.com/github/spec-kit.git specify init <PROJECT_NAME>` and selecting cursor-agent, the terminal shows that it installs all the requirements. However, running `specify check` displays the following\n\n```bash\n\u251c\u2500\u2500 \u25cf Git version control (available)\n\u251c\u2500\u2500 \u25cf GitHub Copilot (not found)\n\u251c\u2500\u2500 \u25cf Claude Code (not found)\n\u251c\u2500\u2500 \u25cf Gemini CLI (not found)\n\u251c\u2500\u2500 \u25cf Cursor (not found)\n\u251c\u2500\u2500 \u25cf Qwen Code (not found)\n\u251c\u2500\u2500 \u25cf opencode (not found)\n\u251c\u2500\u2500 \u25cf Codex CLI (not found)\n\u251c\u2500\u2500 \u25cf Windsurf (not found)\n\u251c\u2500\u2500 \u25cf Kilo Code (not found)\n\u251c\u2500\u2500 \u25cf Auggie CLI (not found)\n\u251c\u2500\u2500 \u25cf CodeBuddy (not found)\n\u251c\u2500\u2500 \u25cf Roo Code (not found)\n\u251c\u2500\u2500 \u25cf Amazon Q Developer CLI (not found)\n\u251c\u2500\u2500 \u25cf Visual Studio Code (available)\n\u2514\u2500\u2500 \u25cf Visual Studio Code Insiders (not found)\n```\n`uv tool list` displays:\n```bash\nspecify-cli v0.0.20\n- specify\n```\n\nTrying to run any `/speckit-*` command shows and does nothing in agent chat in Cursor.\n\nI'm using Cursor on Windows 10.\n\n",
      "state": "closed",
      "created_at": "2025-10-17 13:20:35",
      "updated_at": "2025-10-19 03:03:15",
      "closed_at": "2025-10-19 03:03:15",
      "author": {
        "id": 233577286,
        "username": "konrouda",
        "display_name": "konrouda",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9247173061,
          "name": "needs-author-response",
          "color": "dd6b1d",
          "description": ""
        },
        {
          "id": 9261375035,
          "name": "needs-verification",
          "color": "B95D4A",
          "description": "Pull request or bug report that requires validation and testing before it can be acted on."
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419152493,
          "body": "@konrouda can you confirm that you are in the project folder in Cursor?",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 02:29:44",
          "updated_at": "2025-10-19 02:29:44",
          "issue_id": 926
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3525379742,
      "number": 925,
      "title": "Fail to init for cursor on 0.0.69",
      "body": "I try to init spec kit in folder\n```bash\nspecify init --here\n                                                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557                                                  \n                                                 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d                                                  \n                                                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2588\u2554\u255d                                                   \n                                                 \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d    \u255a\u2588\u2588\u2554\u255d                                                    \n                                                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551        \u2588\u2588\u2551                                                     \n                                                 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d        \u255a\u2550\u255d                                                     \n                                                                                                                                                       \n                                                   GitHub Spec Kit - Spec-Driven Development Toolkit                                                   \n\nWarning: Current directory is not empty (15 items)\nTemplate files will be merged with existing content and may overwrite existing files\nDo you want to continue? [y/N]: y\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                                                     \u2502\n\u2502  Specify Project Setup                                                                                                                              \u2502\n\u2502                                                                                                                                                     \u2502\n\u2502  Project         myProject                                                                                                               \u2502\n\u2502  Working Path    /path/to/project                                                                         \u2502\n\u2502                                                                                                                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Choose your AI assistant: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                                                                     \u2502\n\nSelected AI assistant: cursor\nSelected script type: sh\nNo matching release asset found for cursor (expected pattern: spec-kit-template-cursor-sh)\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Available Assets \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 spec-kit-template-auggie-ps-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-auggie-sh-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-claude-ps-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-claude-sh-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-codebuddy-ps-v0.0.69.zip                                                                                                          \u2502\n\u2502 spec-kit-template-codebuddy-sh-v0.0.69.zip                                                                                                          \u2502\n\u2502 spec-kit-template-codex-ps-v0.0.69.zip                                                                                                              \u2502\n\u2502 spec-kit-template-codex-sh-v0.0.69.zip                                                                                                              \u2502\n\u2502 spec-kit-template-copilot-ps-v0.0.69.zip                                                                                                            \u2502\n\u2502 spec-kit-template-copilot-sh-v0.0.69.zip                                                                                                            \u2502\n\u2502 spec-kit-template-cursor-agent-ps-v0.0.69.zip                                                                                                       \u2502\n\u2502 spec-kit-template-cursor-agent-sh-v0.0.69.zip                                                                                                       \u2502\n\u2502 spec-kit-template-gemini-ps-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-gemini-sh-v0.0.69.zip                                                                                                             \u2502\n\u2502 spec-kit-template-kilocode-ps-v0.0.69.zip                                                                                                           \u2502\n\u2502 spec-kit-template-kilocode-sh-v0.0.69.zip                                                                                                           \u2502\n\u2502 spec-kit-template-opencode-ps-v0.0.69.zip                                                                                                           \u2502\n\u2502 spec-kit-template-opencode-sh-v0.0.69.zip                                                                                                           \u2502\n\u2502 spec-kit-template-q-ps-v0.0.69.zip                                                                                                                  \u2502\n\u2502 spec-kit-template-q-sh-v0.0.69.zip                                                                                                                  \u2502\n\u2502 spec-kit-template-qwen-ps-v0.0.69.zip                                                                                                               \u2502\n\u2502 spec-kit-template-qwen-sh-v0.0.69.zip                                                                                                               \u2502\n\u2502 spec-kit-template-roo-ps-v0.0.69.zip                                                                                                                \u2502\n\u2502 spec-kit-template-roo-sh-v0.0.69.zip                                                                                                                \u2502\n\u2502 spec-kit-template-windsurf-ps-v0.0.69.zip                                                                                                           \u2502\n\u2502 spec-kit-template-windsurf-sh-v0.0.69.zip                                                                                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Failure \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Initialization failed: 1                                                                                                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n```\n\nand i guess the issue is in search pattern: it looks for **spec-kit-template-cursor-sh** and can't find it because the name of zip has other pattern -> **spec-kit-template-cursor-agent-sh**",
      "state": "closed",
      "created_at": "2025-10-17 10:08:29",
      "updated_at": "2025-10-19 12:46:40",
      "closed_at": "2025-10-19 12:46:40",
      "author": {
        "id": 19776684,
        "username": "Gokujo",
        "display_name": "Gokujo",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9247173061,
          "name": "needs-author-response",
          "color": "dd6b1d",
          "description": ""
        },
        {
          "id": 9261375035,
          "name": "needs-verification",
          "color": "B95D4A",
          "description": "Pull request or bug report that requires validation and testing before it can be acted on."
        }
      ],
      "comment_count": 2,
      "comments": [
        {
          "id": 3416506747,
          "body": "@Gokujo can you install the latest version of Specify and see if the issue persists?",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 17:44:25",
          "updated_at": "2025-10-17 17:44:25",
          "issue_id": 925
        },
        {
          "id": 3419640394,
          "body": "i update it with the install command... i couldn't find any info in readme so i thought it would update automatically",
          "author": {
            "id": 19776684,
            "username": "Gokujo",
            "display_name": "Gokujo",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 12:46:40",
          "updated_at": "2025-10-19 12:46:40",
          "issue_id": 925
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3524962537,
      "number": 922,
      "title": "Edge cases as part of spec",
      "body": "When a spec file is created, there is also a section \"edge cases\".\n\nInterestingly it is not suggested that answering the \"edge cases\" should ideally be part of the specification process. I think that should be the default or at least the recommendation.",
      "state": "closed",
      "created_at": "2025-10-17 08:03:05",
      "updated_at": "2025-10-17 09:26:01",
      "closed_at": "2025-10-17 09:26:01",
      "author": {
        "id": 669728,
        "username": "stefanwalther",
        "display_name": "stefanwalther",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3524485248,
      "number": 920,
      "title": "Will translating the files in the specs directory affect the execution of subsequent speckit commands?",
      "body": "When I execute commands such as specify, schedule, task, etc., it is accompanied by the prompt command: translate everything generated into XX language\n\nDoes the translated file in the specs directory affect the correct execution of other speckit commands?",
      "state": "closed",
      "created_at": "2025-10-17 04:40:44",
      "updated_at": "2025-10-17 17:45:42",
      "closed_at": "2025-10-17 17:45:42",
      "author": {
        "id": 22112076,
        "username": "Czlun",
        "display_name": "Czlun",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3524483654,
      "number": 919,
      "title": "Will translating the files in the specs directory affect the execution of subsequent speckit commands?",
      "body": "\u5f53\u6211\u6267\u884cspecify, plan, task\u7b49\u547d\u4ee4\u65f6\uff0c\u9644\u5e26\u4e86prompt \u6307\u4ee4\uff1a\u5c06\u751f\u6210\u7684\u6240\u6709\u5185\u5bb9\u90fd\u7ffb\u8bd1\u4e3aXX\u8bed\u8a00\n\n\u7ffb\u8bd1\u540e\u662f\u5426\u4f1a\u5f71\u54cdspeckit\u5176\u4ed6\u547d\u4ee4\u7684\u6b63\u786e\u6267\u884c\uff1f",
      "state": "closed",
      "created_at": "2025-10-17 04:39:36",
      "updated_at": "2025-10-17 04:39:47",
      "closed_at": "2025-10-17 04:39:47",
      "author": {
        "id": 22112076,
        "username": "Czlun",
        "display_name": "Czlun",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3522771593,
      "number": 916,
      "title": "Establish best practices for evolving specs as features are added to existing projects",
      "body": "## Problem\nWhen spec-kit is initialized in an existing project, there's no clear workflow for keeping specs synchronized as new features are developed. Users report that re-running `specify init` overwrites user-modified files (like `constitution.md`), and manually managing spec updates becomes error-prone at scale.\n\nThis is particularly problematic for brownfield projects where development continues iteratively post-initialization.\n\n## Current Pain Points\n- Re-running `specify init --here` to get latest templates overwrites customized configuration\n- No documented workflow for incrementally adding feature specs without regenerating everything\n- Specs diverge from codebase as the project evolves\n- Unclear how to keep templates/prompts in sync with spec-kit releases while preserving project-specific changes\n- Related issues: #785, #324, #361\n\n## Desired Outcome\nEstablish and document a sustainable pattern for evolving specs throughout a project's lifecycle, including:\n\n### 1. **Preservation Strategy**\n- Identify which files should never be overwritten (constitution.md, project-specific specs)\n- Define which files should be updated automatically (templates, prompts)\n- Provide tooling or clear manual steps for safe updates\n\n### 2. **Feature Evolution Workflow**\n- Step-by-step guide: initialize spec-kit \u2192 build features \u2192 add new feature specs\n- How to write new specs when repository has evolved since initialization\n- Handling existing code/features when writing new specs\n\n### 3. **Versioning & Updates**\n- How to upgrade spec-kit without destroying project state\n- Suggested update frequency and triggers\n- Rollback procedures if needed\n\n### 4. **Tooling**\n- Consider `specify update` CLI command (alternative: clear documentation)\n- Safe merge strategy for template updates\n- Validation that specs stay aligned with constitution\n\n## Acceptance Criteria\n- [ ] Documented workflow for adding feature specs post-initialization\n- [ ] Guidelines on preserving vs. updating .specify/ contents during upgrades\n- [ ] Example: Adding a second feature to a project initialized with one feature\n- [ ] Decision: update CLI command vs. documented manual process\n- [ ] Update README \"Development phases\" to emphasize iterative enhancement workflow\n\n## Related Issues\n- #361 - Document how to update spec-kit \n- #785 - How to update to latest spec-kit prompts\n- #324 - Best practices for updating to new release\n- Discussion #152 - Evolving specs and keeping them in sync",
      "state": "open",
      "created_at": "2025-10-16 17:14:05",
      "updated_at": "2025-10-19 02:30:13",
      "closed_at": null,
      "author": {
        "id": 47271662,
        "username": "jamesrosing",
        "display_name": "jamesrosing",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9150267149,
          "name": "documentation",
          "color": "0075ca",
          "description": "Improvements or additions to documentation"
        }
      ],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3522532009,
      "number": 913,
      "title": "folder structure: speckit.command.md -> speckit/command.md. shows up as speckit:plan in claude",
      "body": "why go with the long namespaced names ? folder is much clearer. ",
      "state": "open",
      "created_at": "2025-10-16 16:03:57",
      "updated_at": "2025-10-19 02:35:11",
      "closed_at": null,
      "author": {
        "id": 642564,
        "username": "orenmizr",
        "display_name": "orenmizr",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419154997,
          "body": "This would work for Claude Code and likely other agents, but in VS Code this doesn't seem to be the case. What agents support this properly?",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 02:35:11",
          "updated_at": "2025-10-19 02:35:11",
          "issue_id": 913
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3521074628,
      "number": 909,
      "title": "It generates the wrong feature name. [ `specify-scripts-bash`]",
      "body": "when we give some tasks it generates a feature branch with random names like `specify-scripts-bash`",
      "state": "open",
      "created_at": "2025-10-16 09:32:14",
      "updated_at": "2025-10-19 02:36:17",
      "closed_at": null,
      "author": {
        "id": 72178131,
        "username": "MonuCarpenter",
        "display_name": "MonuCarpenter",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        },
        {
          "id": 9295705533,
          "name": "templates",
          "color": "e3aa01",
          "description": "Related to template definition and not the CLI."
        }
      ],
      "comment_count": 4,
      "comments": [
        {
          "id": 3411716812,
          "body": "I just installed spec kit in a new repo and while running the `/speckit.specify` command the AI agent just tried to run this command:\n``` bash\nbash -lc \".specify/scripts/bash/create-new-feature.sh --json \\\"llm prompt and output improvements\\\" --short-name \\\"llm-prompt-output\\\"\"\n```\n\nThat doesn't look like JSON to me, and I got this error upon running the script that I see in my agent window:\n```\nError: --short-name requires a value\n```\n\nI think I can continue with development but the side effect is that it looks like it just creates a kind of random branch and feature name, e.g.: `001-users-benjaminedgar-workspace` is what it created for me",
          "author": {
            "id": 13237565,
            "username": "ben-edgar",
            "display_name": "ben-edgar",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 16:35:17",
          "updated_at": "2025-10-16 19:03:13",
          "issue_id": 909
        },
        {
          "id": 3412218859,
          "body": "@ben-edgar you are running in a wrong way, you should either pass --short-name or --json. try running\n\n`.specify/scripts/bash/create-new-feature.sh --short-name llm-prompt-output \"llm prompt and output improvements\"`\n\ni mean `command --short-name <branch name> <description>`\n@ben-edgar This will be the expected output: \n```\nSwitched to a new branch '002-llm-prompt-output'\nBRANCH_NAME: 002-llm-prompt-output\nSPEC_FILE: /Users/<dir>/specs/002-llm-prompt-output/spec.md\nFEATURE_NUM: 002\nSPECIFY_FEATURE environment variable set to: 002-llm-prompt-output\n```",
          "author": {
            "id": 72178131,
            "username": "MonuCarpenter",
            "display_name": "MonuCarpenter",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 18:16:59",
          "updated_at": "2025-10-16 18:21:17",
          "issue_id": 909
        },
        {
          "id": 3412371539,
          "body": "Some additional info regarding `--short-name` fails:\n\nPart of the problem is the instructions here: https://github.com/github/spec-kit/blob/main/templates/commands/specify.md\n\nI have modified the instructions to get claude-code + sonnet 4.5 to get it right in one shot:\n\n```\n   - Insert the short-name argument in the `.specify/scripts/bash/create-new-feature.sh --json \"$ARGUMENTS\"` command with the 2-4 word short name you created in step 1 BEFORE the \"$ARGUMENTS\".\n   - Bash: `.specify/scripts/bash/create-new-feature.sh --json --short-name \"your-generated-short-name\" \"$ARGUMENTS\"`\n   - PowerShell: `.specify/scripts/bash/create-new-feature.sh --json -ShortName \"your-generated-short-name\" \"$ARGUMENTS\"`\n   - IMPORTANT: You CAN NOT put arguments after \"$ARGUMENTS\".\n   - Run scripts WITHOUT ANY arguments to see syntax - `--help` will have some scripts do unexpected things like create a branch anyway.\n",
          "author": {
            "id": 2635700,
            "username": "dldinternet",
            "display_name": "dldinternet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 18:47:42",
          "updated_at": "2025-10-16 18:47:42",
          "issue_id": 909
        },
        {
          "id": 3412458010,
          "body": "Yes @dldinternet I think that's the exact issue! I got this after running the `/speckit.specify` command. Updated my comment above to clarify when this issue came up.",
          "author": {
            "id": 13237565,
            "username": "ben-edgar",
            "display_name": "ben-edgar",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 19:02:11",
          "updated_at": "2025-10-16 19:03:36",
          "issue_id": 909
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3520681581,
      "number": 908,
      "title": "Is the reference to .specify/templates/commands correct?",
      "body": "In the file templates/plan-template.md there is this statement:\n\n\"Note: This template is filled in by the /speckit.plan command. See .specify/templates/commands/plan.md for the execution workflow.\"\n\nI don't see this path, and we I was using Amazon Q I got this error when it was reading the templates:\n```\nTool validation failed:\nFailed to validate tool parameters: Directory not found: .specify/templates/commands\n```\nMaybe is because of this?",
      "state": "open",
      "created_at": "2025-10-16 07:32:59",
      "updated_at": "2025-10-19 05:42:29",
      "closed_at": null,
      "author": {
        "id": 159034,
        "username": "chsanch",
        "display_name": "chsanch",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419235369,
          "body": "I similarly had no commands/ directory after initial setup with `uv tool install specify-cli --from git+https://github.com/github/spec-kit.git` and `specify init .`. Thus when I ran `/speckit.constitution ...` my model (GPT-5) seems to have optimized it away.\n\nSemi-trimmed output:\n\n```markdown\n> /speckit.constitution Create principles ...\n\nI'll gather the Spec Kit files in your repo to update the constitution template and ensure templates align, then write the completed constitution with a sync impact report. \n\nCreated 7 todos\n\nRead [](/.specify)\n\nRead [](/.specify/memory)\n\nRead [](/.specify/memory/constitution.md)\n\nStarting (3/7) *Fill principles and governance*\n\nRead [](/.specify/templates)\n\nRead [](/.specify/templates/commands)\n\nRead [](/.specify/templates/plan-template.md)\n\nRead [](/.specify/templates/spec-template.md)\n\nRead [](/.specify/templates/tasks-template.md)\n\nRead [](/.specify/templates/checklist-template.md)\n\nI'm going to update the constitution template with concrete principles and governance, and align the plan and tasks templates to reflect the new quality gates. \n\nUsing \"Apply Patch\"\n\nI'll reopen the updated constitution to fix Markdown lint issues (blank lines, tabs, list indentation), and then align plan and tasks templates with the new gates. \n\nRead [](/.specify/memory/constitution.md)\n\nUsing \"Apply Patch\"\n\nRead [](/.specify/memory/constitution.md)\n\nStarting (4/7) *Propagate consistency to templates*\n\nI'll adjust the plan and tasks templates to explicitly reflect the new constitution gates and test requirements. \n\nUsing \"Apply Patch\"\n\nI'll scan and update the plan and tasks templates to fix Markdown lint warnings (code block languages and emphasis), and to reflect constitution test requirements. \n\nRead [](/.specify/templates/plan-template.md)\n\nUsing \"Apply Patch\"\n\nRead [](/.specify/templates/tasks-template.md#1-1), lines 1 to 120\n\nUsing \"Apply Patch\"\n\nStarting (7/7) *Summarize for user*\n\nUsing \"Apply Patch\"\n\nI\u2019ll implement your constitution using spec-kit\u2019s process and align the templates so your Spec-Driven workflow is enforceable.\n\nHigh-level steps:\n- Fill constitution.md with concrete principles and governance.\n- Update plan and tasks templates to reflect the new quality gates.\n- Validate formatting and remove placeholder references.\n\nactions taken\n- Created a complete Constitution focused on:\n  - Code Quality (non-negotiable)\n  - Test-first and evidence-driven verification\n  - User experience consistency\n  - Performance and reliability budgets\n  - Quality gates, workflow & governance\n- Added a Sync Impact Report comment at the top of constitution.md with version diff, affected templates, and follow-ups.\n- Updated templates:\n  - plan-template.md\n    - Expanded \u201cConstitution Check\u201d with explicit bullets for code quality, testing, UX, performance, security/privacy, and observability.\n    - Fixed fenced code block languages.\n    **- Replaced reference to a non-existent commands directory with the spec-kit docs link.**\n    - Tidied \u201cComplexity Tracking\u201d note to avoid markdown lint warnings.\n  - tasks-template.md\n    - Tests are now required (not optional) to match the constitution.\n    - Added a \u201cConstitution Quality Gates\u201d checklist at the top.\n    - Fixed markdown lint (converted emphasized note to a blockquote).\n\nfiles changed\n- constitution.md \u2014 Filled with project principles, quality gates, governance, and versioning; includes Sync Impact Report.\n**- plan-template.md \u2014 Constitution gates codified; lint fixes; doc link updated.**\n- tasks-template.md \u2014 Tests required; added gates checklist; lint fixes.\n\nconstitution summary\n...\n\nsync impact report (embedded in constitution as HTML comment)\n- Version: N/A \u2192 1.0.0\n- Added: Core Principles, Quality Gates & Cross-Cutting Standards, Development Workflow & Review Process\n- Templates requiring updates:\n  - Updated: plan-template.md\n  - Updated: tasks-template.md\n  - Reviewed: spec-template.md (no change)\n  **- Pending: .specify/templates/commands/* (directory not present; guidance redirected to docs)**\n- Follow-ups:\n  - Define service-specific performance budgets where defaults are insufficient\n  - Ensure CI enforces coverage thresholds and gates\n\n...\n```\n",
          "author": {
            "id": 14172904,
            "username": "csveritas",
            "display_name": "csveritas",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 05:42:29",
          "updated_at": "2025-10-19 05:42:29",
          "issue_id": 908
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3520283178,
      "number": 906,
      "title": "spec-kit docs for quickstart missing constitution definition",
      "body": "https://github.github.com/spec-kit/quickstart.html\n\nthere is no initial hint to actually run: /speckit.constitution first. Add an example section that actually states how and why to use the constituition as e.g. described here: https://den.dev/blog/github-spec-kit/",
      "state": "open",
      "created_at": "2025-10-16 04:32:51",
      "updated_at": "2025-10-19 02:48:54",
      "closed_at": null,
      "author": {
        "id": 98607599,
        "username": "mischadiehm",
        "display_name": "mischadiehm",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9150267149,
          "name": "documentation",
          "color": "0075ca",
          "description": "Improvements or additions to documentation"
        }
      ],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3519255394,
      "number": 899,
      "title": "Continue=stop is not recognized",
      "body": "So far, I'm very happy with spec-kit but I wanted to let you know that I found these errors when calling /plan. Please see below for more details.\n\nIn the chat window\n\n<img width=\"433\" height=\"209\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/700cf284-ed9b-46dd-afbc-801eb2a37596\" />\n\nafter I allow the script to run I found this error in the console.\n\n<img width=\"1295\" height=\"159\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f4071f45-5736-4244-a33e-624cb3bf4544\" />\n\nHowever, it did complete the plan as expected.\n\nI'm using Windows 11, with VSCode latest update and GPT-5 ",
      "state": "closed",
      "created_at": "2025-10-15 19:12:21",
      "updated_at": "2025-10-15 22:00:20",
      "closed_at": "2025-10-15 22:00:20",
      "author": {
        "id": 63487874,
        "username": "dotnetspark",
        "display_name": "dotnetspark",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3407922267,
          "body": "I am actually not entirely sure why this is appending that error action preference. @dotnetspark can you try re-running the plan prompt in a new chat session?\n",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 19:16:54",
          "updated_at": "2025-10-15 19:16:54",
          "issue_id": 899
        },
        {
          "id": 3407935337,
          "body": "Thanks for the quick response, Den. In fact, I think it's transient or self-healed, because it completed the plan after that. It just printed out that error and continue.",
          "author": {
            "id": 63487874,
            "username": "dotnetspark",
            "display_name": "dotnetspark",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 19:20:57",
          "updated_at": "2025-10-15 19:20:57",
          "issue_id": 899
        },
        {
          "id": 3408464240,
          "body": "I found out it was my terminal",
          "author": {
            "id": 63487874,
            "username": "dotnetspark",
            "display_name": "dotnetspark",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 22:00:20",
          "updated_at": "2025-10-15 22:00:20",
          "issue_id": 899
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3518290508,
      "number": 896,
      "title": "Constitution command: scope ambiguity allows unintended feature execution; add explicit guard",
      "body": "**Summary**\nInvoking /speckit.constitution with additional feature or implementation directives (e.g., \u201cdeliver a Todo app\u201d) can cause the agent to both amend the constitution and generate application code in the same run. This couples governance changes with feature implementation and reduces auditability.\n\n**Current Behavior**\nIf the operator runs a single message like:\n\n```\n/speckit.constitution Deliver a minimal, production\u2011style, React Router v7 Todo application\n```\n\nthe agent may (depending on model interpretation) both:\n\n1. Update constitution.md\n2. Implement new application routes/components\n\n**Expected Behavior**\n\nThe constitution command should:\n\n- Perform only constitution update + template sync.\n- Extract any non-constitution intents and present them as suggested follow-up commands (e.g., /speckit.specify ..., /speckit.plan ...).\n- Never modify app source files directly.\n\n**Reproduction Steps**\n\n1. Use a project with an unfilled or editable constitution.md template.\n2. Run the mixed directive shown above.\n3. Observe that new source files may be created in addition to constitution edits.\n\n**Impact**\n\n- Harder to review governance-only changes.\n- Risk of unintentional code churn in regulated or audited environments.\n- Inconsistent behavior (sometimes only constitution updates; other times dual action).\n\n**Root Cause**\nPrompt lacked an explicit single-task scope guard, allowing the LLM to merge independent imperatives.\n\n**Proposed Solution (Implemented and Tested Locally)**\nAdded a SCOPE GUARD section to speckit.constitution.prompt.md:\n\n- Forbids executing extra feature/code intents.\n- Introduces an \u201cextra intent extraction\u201d heuristic.\n- Adds a \u201cNext Actions\u201d section after constitution update summarizing suggested follow-up commands.\n\n**Example After Patch**\nInput:\n```\n/speckit.constitution\u00a0Deliver\u00a0a\u00a0minimal,\u00a0production\u2011style,\u00a0React\u00a0Router\u00a0v7\u00a0Todo\u00a0application\n```\nOutput:\n\n- Constitution updated only.\n- \u201cNext Actions\u201d:\n  - Intent: Deliver a minimal, production\u2011style, React Router v7 Todo application\n  - Suggested Command: /speckit.specify minimal React Router v7 Todo application\n\n**Acceptance Criteria**\n\n- Mixed instruction invocation changes only constitution + synced templates.\n- Extra intents listed; no feature code added.\n- Guard text appears in prompt file.\n- Maintainers confirm phrasing aligns with template style.\n\n[speckit.constitution.prompt.md](https://github.com/user-attachments/files/22929589/speckit.constitution.prompt.md)\n\n**Follow-Up Recommendations**\n\n- Propagate similar guard to /speckit.plan, /speckit.specify, /speckit.tasks.\n- Optionally add regression test harness for prompt behavior.\n\n**AI Assistance Disclosure**\n\nThe issue text and the new SCOPE GUARD / intent extraction guard wording were generated with assistance from an AI coding agent and then human\u2011reviewed and validated.",
      "state": "open",
      "created_at": "2025-10-15 14:21:35",
      "updated_at": "2025-10-20 21:12:43",
      "closed_at": null,
      "author": {
        "id": 14135050,
        "username": "hmanicka",
        "display_name": "hmanicka",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        },
        {
          "id": 9295705533,
          "name": "templates",
          "color": "e3aa01",
          "description": "Related to template definition and not the CLI."
        }
      ],
      "comment_count": 1,
      "comments": [
        {
          "id": 3423737667,
          "body": "In #967 I was working on guards since I had a different problem on getting speckit to have stronger declarative definition-of-done and did not think of this. Ideally I image this is a problem for the ai coding platform: Claudecode, cursor etc. and the template packer/unpacker here could have explicit mapping to each of those tools' front matter params.  Like in claude the front matter allows you to explicitly disable edits https://docs.claude.com/en/docs/claude-code/slash-commands#frontmatter So if someone has a moment it would be trivial to make a matrix of each of the agents supported in spec kit and the their native way of tool whitelisting. With that someone should easily be able to put a PR. I would just ask whoever is doing this too post a matrix first, because it would also be vauable to quickly look at the other agents that people have feature requests and organize the work around \"standardizing/extending-support for agenticcoder interop\"\n@localden do you think the following tasks are reasonable:\n- [ ] Post matrix of current supported coding agents, how tool use is implmented today, potential changes to templates in order to leverage capabilities native to coder\n- [ ] For all te requests and PRs from people aout supporting other AI tools, create an issue specifically for that and have people comment on that rather than open new tickets.\n- [ ] In he new issue there is a task for greater exploration on tool-by-tool supported features. Problem is that not all coding tools have all the features around tool use, execution guard etc. But we want to be extreamly safe since this is an attach vector that could be used to inject executable code at the repo level.\n- [ ] Upgrade current templets to use tool restrictions relative to the slash command\n- [ ] publish a compatibility metrix and roadmap for different ai tools and the features they need to support before they are eligible for speckit.   ",
          "author": {
            "id": 24839871,
            "username": "RoyceLeonD",
            "display_name": "RoyceLeonD",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 21:12:43",
          "updated_at": "2025-10-20 21:12:43",
          "issue_id": 896
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3517937219,
      "number": 892,
      "title": "Add support for extensions or variations",
      "body": "## Problem\n\nUsers are creating variations of Spec Kit prompts for team-specific and org-specific workflows. Managing all variations in a single repo is becoming difficult. We need a way for users to install custom prompt collections from external repositories.\n\n**Example Extensions:**\n- BDD (Behavior-Driven Development) workflows\n- Bug diagnosis and root cause analysis\n- Deep planning and architecture reviews\n- Security-focused specification patterns\n- Performance optimization workflows\n\n---\n\n## Proposed Solution\n\n### Installation Command\n\n```bash\nspecify install-extension https://github.com/org/speckit-extension-bdd\n```\n\n### Installation Flow\n\n1. **Download** extension from GitHub (latest release or main branch)\n2. **Detect** which AI agent is configured (by checking for `.github/prompts/`, `.claude/commands/`, etc.)\n3. **Copy** extension files to appropriate locations:\n   - Commands \u2192 Agent-specific directory (e.g., `.github/prompts/`)\n   - Memory files \u2192 `.specify/memory/`\n   - Templates \u2192 `.specify/templates/`\n4. **Track** installation in `.specify/extensions.json`\n\n---\n\n## Agent Detection\n\n**Current State:** The CLI does NOT save which agent was selected during `specify init`. No config file is created.\n\n**Detection Strategy:** Check which agent-specific directories exist in the project:\n\n| Agent | Directory | \n|-------|-----------|\n| GitHub Copilot | `.github/prompts/` |\n| Claude Code | `.claude/commands/` |\n| Gemini CLI | `.gemini/commands/` |\n| Cursor | `.cursor/commands/` |\n| Windsurf | `.windsurf/workflows/` |\n\n**Installation Behavior:**\n\n```bash\n# Auto-detect agent from project structure\nspecify install-extension https://github.com/org/ext\n\n# Override with explicit agent\nspecify install-extension https://github.com/org/ext --agent claude\n```\n\n**Edge Cases:**\n- Multiple agent directories found \u2192 Prompt user to choose or install to all\n- No agent directory found \u2192 Require `--agent` flag\n\n---\n\n## Extension Repository Structure\n\n### Option 1: Hybrid Structure (Recommended)\n\nSource templates + optional pre-built agent variants:\n\n```\nspeckit-extension-bdd/\n\u251c\u2500\u2500 extension.yaml                 # Extension manifest\n\u251c\u2500\u2500 README.md                      \n\u251c\u2500\u2500 memory/                        # Shared context files\n\u2502   \u2514\u2500\u2500 bdd-guidelines.md  \n\u251c\u2500\u2500 templates/                     # Source templates (generic format)\n\u2502   \u251c\u2500\u2500 commands/                 \n\u2502   \u2502   \u251c\u2500\u2500 given-when-then.md   # Generic markdown with {SCRIPT}, $ARGUMENTS\n\u2502   \u2502   \u251c\u2500\u2500 scenario.md\n\u2502   \u2502   \u2514\u2500\u2500 feature-spec.md\n\u2502   \u2514\u2500\u2500 acceptance-criteria.md       \n\u2514\u2500\u2500 agents/                        # Pre-built variants (optional, for speed)\n    \u251c\u2500\u2500 claude/commands/\n    \u2502   \u251c\u2500\u2500 speckit.given-when-then.bdd.md\n    \u2502   \u2514\u2500\u2500 speckit.scenario.bdd.md\n    \u251c\u2500\u2500 gemini/commands/\n    \u2502   \u251c\u2500\u2500 speckit.given-when-then.bdd.toml\n    \u2502   \u2514\u2500\u2500 speckit.scenario.bdd.toml\n    \u2514\u2500\u2500 copilot/prompts/\n        \u251c\u2500\u2500 speckit.given-when-then.bdd.prompt.md\n        \u2514\u2500\u2500 speckit.scenario.bdd.prompt.md\n```\n\n**Note:** Files in `agents/` include the extension name (e.g., `.bdd.`) for easy identification after installation.\n\n**Why this works:**\n- Write once in `templates/commands/` (generic format)\n- Optionally provide pre-built variants in `agents/` for popular agents\n- CLI tries pre-built first, falls back to converting from source templates\n- Extension name in filename prevents conflicts and enables easy removal\n\n### Option 2: Flat Structure\n\nSimpler, no pre-built variants:\n\n```\nspeckit-extension-bdd/\n\u251c\u2500\u2500 extension.yaml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 commands/\n\u2502   \u251c\u2500\u2500 given-when-then.md    # Generic markdown\n\u2502   \u2514\u2500\u2500 scenario.md\n\u251c\u2500\u2500 memory/\n\u2502   \u2514\u2500\u2500 bdd-guidelines.md\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 acceptance-criteria.md\n```\n\n**Trade-off:** Simpler to create, but CLI must always convert on-the-fly.\n\n---\n\n## Extension Manifest\n\n**File:** `extension.yaml`\n\n```yaml\nname: bdd-workflows\nversion: 1.0.0\ndescription: Behavior-Driven Development workflows for Spec-Driven Development\nauthor: your-org\n\n# Compatibility\nspec_kit_version: \">=0.9.0\"\nsupported_agents:\n  - claude\n  - copilot\n  - gemini\n  # or \"all\" for all agents\n\n# What this extension provides\nprovides:\n  commands:\n    - given-when-then\n    - scenario\n    - feature-spec\n  memory:\n    - bdd-guidelines.md\n  templates:\n    - acceptance-criteria.md\n```\n\n---\n\n## Installation Details\n\n### File Installation Strategy\n\n**Priority order:**\n1. Use pre-built agent variant if exists (`agents/copilot/prompts/`)\n2. Convert from source templates (`templates/commands/`)\n3. Copy directly from `commands/` and auto-convert\n\n**File targets:**\n- Commands \u2192 Agent directory (e.g., `.github/prompts/`, `.claude/commands/`)\n- Memory \u2192 `.specify/memory/`\n- Templates \u2192 `.specify/templates/`\n\n### File Naming Convention\n\nTo track which files belong to which extension, use a naming convention:\n\n**Commands:**\n```\nspeckit.<command>.<extension-name>.<agent-format>\n\nExamples:\n  .github/prompts/speckit.given-when-then.bdd.prompt.md\n  .claude/commands/speckit.scenario.bdd.md\n  .gemini/commands/speckit.feature-spec.bdd.toml\n```\n\n**Memory & Templates:**\n```\n<filename>.<extension-name>.md\n\nExamples:\n  .specify/memory/bdd-guidelines.bdd.md\n  .specify/templates/acceptance-criteria.bdd.md\n```\n\n**Benefits:**\n- Easy to identify which extension a file belongs to\n- Safe removal - just delete files with `.<extension-name>.` pattern\n- Prevents naming conflicts between extensions\n- Clear ownership in multi-extension projects\n\n### Installation Tracking\n\nCreate `.specify/extensions.json`:\n```json\n{\n  \"installed\": [\n    {\n      \"name\": \"bdd-workflows\",\n      \"version\": \"1.0.0\",\n      \"source\": \"https://github.com/org/speckit-extension-bdd\",\n      \"installed_at\": \"2025-10-16T10:30:00Z\",\n      \"agent\": \"copilot\",\n      \"files\": {\n        \"commands\": [\n          \".github/prompts/speckit.given-when-then.bdd.prompt.md\",\n          \".github/prompts/speckit.scenario.bdd.prompt.md\"\n        ],\n        \"memory\": [\n          \".specify/memory/bdd-guidelines.bdd.md\"\n        ],\n        \"templates\": [\n          \".specify/templates/acceptance-criteria.bdd.md\"\n        ]\n      }\n    }\n  ]\n}\n```\n\nThis allows:\n- Easy listing of installed extensions\n- Safe removal by file path\n- Version tracking for updates\n- Conflict detection before installation\n\n---\n\n## Example: Installing an Extension\n\n```bash\n$ specify install-extension https://github.com/org/speckit-extension-bdd\n\n\u26a0\ufe0f  Installing Extension\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nExtension: bdd-workflows v1.0.0\nSource: https://github.com/org/speckit-extension-bdd\n\nDetected agent: copilot (.github/prompts/ found)\n\nWill install:\n  \u2022 speckit.given-when-then.bdd.prompt.md\n  \u2022 speckit.scenario.bdd.prompt.md\n  \u2022 speckit.feature-spec.bdd.prompt.md\n  \u2022 bdd-guidelines.bdd.md (memory)\n  \u2022 acceptance-criteria.bdd.md (template)\n\nContinue? [y/N] y\n\n\u2713 Downloaded extension\n\u2713 Installed 3 commands to .github/prompts/\n\u2713 Installed 1 memory file to .specify/memory/\n\u2713 Installed 1 template to .specify/templates/\n\u2713 Updated .specify/extensions.json\n\nExtension installed successfully!\nAvailable commands: /speckit.given-when-then, /speckit.scenario, /speckit.feature-spec\n```\n\n---\n\n## Key Decisions for Discussion\n\n1. **Repository Structure:** Option 1 (hybrid with optional pre-built) vs Option 2 (flat)?\n\n2. **Multi-agent projects:** If both `.github/prompts/` and `.claude/commands/` exist, should we:\n   - Install to both by default?\n   - Prompt user to choose?\n   - Require `--agent` flag?\n\n3. **Conflict handling:** If extension file already exists, should we:\n   - Prompt user (overwrite/skip/rename)?\n   - Fail installation?\n   - Auto-rename?\n\n4. **Version support:** Support specific versions/branches initially or just latest?\n   ```bash\n   specify install-extension https://github.com/org/ext@v1.2.0\n   specify install-extension https://github.com/org/ext@main\n   ```\n\n---\n\n## Next Steps\n\n1. **Gather feedback** on this proposal\n2. **Decide on key questions** above  \n3. **Build MVP** - `install-extension` command\n4. **Create starter extension repository** as template for community\n",
      "state": "open",
      "created_at": "2025-10-15 12:59:06",
      "updated_at": "2025-10-15 14:33:59",
      "closed_at": null,
      "author": {
        "id": 16128850,
        "username": "dasiths",
        "display_name": "dasiths",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3517683804,
      "number": 891,
      "title": "Spec-Kit for Projects with Microservice Architectures (Backend, Frontend, Caching, etc)",
      "body": "I have two git-versioned codebases (backend and frontend) but cannot use a single Constitution.md for them.\n\nBy design, it seems like Github Spec Kit makes the hard assumption that users are going initialize Github Spec Kit in a single codebase \u2013 which is a fair assumption but I don't think it's actually reflective of reality since many people are working on projects with a microservices architecture.",
      "state": "open",
      "created_at": "2025-10-15 11:56:16",
      "updated_at": "2025-10-20 23:56:39",
      "closed_at": null,
      "author": {
        "id": 150245,
        "username": "wle8300",
        "display_name": "wle8300",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3418395624,
          "body": "I'm far from an expert, but I thought that's what the `--no-git` flag was for. It should allow you to navigate into the folder you want to serve as the parent, and then execute something like:\n```bash\nspecify init --here --ai copilot --no-git`\n```\nThen just repeat for the other directory. ",
          "author": {
            "id": 6563688,
            "username": "anchildress1",
            "display_name": "anchildress1",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 12:27:55",
          "updated_at": "2025-10-18 12:27:55",
          "issue_id": 891
        },
        {
          "id": 3420136341,
          "body": "@anchildress1 i looked into the docs and saw that flag... but VSCode's agent doesn't seem to pick up on the fact Spec Kit's installed :\\\n\nTy for the help though!",
          "author": {
            "id": 150245,
            "username": "wle8300",
            "display_name": "wle8300",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 00:40:53",
          "updated_at": "2025-10-20 00:40:53",
          "issue_id": 891
        },
        {
          "id": 3424162159,
          "body": "> VSCode's agent doesn't seem to pick up on the fact Spec Kit's installed\n\nMore out of curiosity than anything @wle8300, which flavor agent are you using? And the default version isn't going to pick up on that specific `init` command\u2014you'd have to set that up somehow manually to get an agent to recognize it, right? How does that work?",
          "author": {
            "id": 6563688,
            "username": "anchildress1",
            "display_name": "anchildress1",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 23:56:39",
          "updated_at": "2025-10-20 23:56:39",
          "issue_id": 891
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3517680418,
      "number": 890,
      "title": "Spec-Kit for Projects with Microservice Architectures (Backend, Frontend, Caching, etc.)",
      "body": null,
      "state": "closed",
      "created_at": "2025-10-15 11:55:13",
      "updated_at": "2025-10-15 11:55:39",
      "closed_at": "2025-10-15 11:55:39",
      "author": {
        "id": 207587691,
        "username": "hello-william",
        "display_name": "hello-william",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3516713368,
      "number": 889,
      "title": "Support for ticketing systems like JIRA",
      "body": "Can we make the spec folder / branches to have JIRA id appended to it? We use jira a lot and having the spec tied to the JIRA will be very helpful. ",
      "state": "open",
      "created_at": "2025-10-15 07:23:19",
      "updated_at": "2025-10-19 23:58:19",
      "closed_at": null,
      "author": {
        "id": 95004135,
        "username": "vicarum",
        "display_name": "vicarum",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3420071707,
          "body": "The spec tied to Asana it's gonna be awesome as well :) ",
          "author": {
            "id": 127997735,
            "username": "DmytrV",
            "display_name": "DmytrV",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 23:58:19",
          "updated_at": "2025-10-19 23:58:19",
          "issue_id": 889
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3516518031,
      "number": 888,
      "title": "Articles IV, V and VI are missing",
      "body": "![Image](https://github.com/user-attachments/assets/02866e9d-2725-4f2a-818f-9c5731233e46)",
      "state": "open",
      "created_at": "2025-10-15 06:20:23",
      "updated_at": "2025-10-17 11:49:22",
      "closed_at": null,
      "author": {
        "id": 129730697,
        "username": "rubdttcom",
        "display_name": "rubdttcom",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3406260620,
          "body": "I read the spec-driven.md just now, and came out with some nice happy feelings, but also a realisation that when it starts talking about the constitution... that even though it reads as if this-is-the-case, its still in a bit of an aspirational stance like the proceeding blurb, rather than a reference on how the current 'operational - runtime' state of spec-kit is in, in its ability to ~enforce, guide against those nominal articles. I think they're more like on going guiding principles behind the primary developer(s) of the kit (and existed in more completeness [inc articles 4, 5, 6] in some other documents during initial ideation - love to see that!). As the kit evolves, stronger alignment hinting/tooling against these articles for the implementing-LLMs will probably happen, but in its current state, these might be considered variously aspirational, with varying amounts of them carrying across into the spec dev runtime process at the moment (and a big kudos to that!!). Its a balancing act between enforcing adherence and desirable degrees of freedom.\n\nNot sure if this is overall a fair assessment, would love to hear other's thoughs! (when i open-endedly querried some LLMs about this, upon this repo, they seemed to come to the same conclusion, as do my projects) @localden maybe even feel like weighing in?",
          "author": {
            "id": 685009,
            "username": "campbells",
            "display_name": "campbells",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 12:48:50",
          "updated_at": "2025-10-15 12:48:50",
          "issue_id": 888
        },
        {
          "id": 3415200792,
          "body": "I think this is intentional, because a charter should not be a standard, so 4, 5, and 6 should be generated by \"you\".",
          "author": {
            "id": 88981,
            "username": "doggy8088",
            "display_name": "doggy8088",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 11:49:22",
          "updated_at": "2025-10-17 11:49:22",
          "issue_id": 888
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3515857466,
      "number": 885,
      "title": "Feature Request: Add a Command for Iterative Task Adjustments",
      "body": "### What\nIntroduce a new command that leverages user-provided prompts and LLM to iteratively and automatically:\n\n- Add new tasks\n- Modify existing tasks\n- Delete tasks\n\nThis command will focus on addressing minor issues or implementing small improvements without altering the core specifications.\n\n### Why\n\n**- Post-Implementation Adjustments**: After generating code with the /implement command, developers often need to make minor tweaks, such as UI polishing or small functional enhancements.\n**- Scope of Adjustments**: These changes are typically too minor to justify using the /specify command, which is designed for larger specification updates.\n**- Preserving Changes**: Manual adjustments are not recorded as tasks and are lost after the work is completed, leading to potential inconsistencies or rework.\n**- Improved Task Management**: The new command will streamline task creation and updates by interpreting prompts more effectively than manual edits to tasks.md, ensuring consistency and traceability.\n",
      "state": "open",
      "created_at": "2025-10-14 23:45:29",
      "updated_at": "2025-10-19 09:45:40",
      "closed_at": null,
      "author": {
        "id": 16532065,
        "username": "devzizai",
        "display_name": "devzizai",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419528973,
          "body": "I totally agree \u2014 I\u2019ve been thinking the same way.\n\nRight now, spec-kit works like a one-shot pipeline (idea \u2192 spec \u2192 code), but real development is iterative. After each implementation, developers often realize they need small adjustments that should feed back into the spec and task structure.\n\nWhat\u2019s missing is a feedback loop: allowing incremental updates to specs and tasks based on post-implementation feedback, instead of regenerating everything from scratch.\n\nYour idea of a command to add, modify, or delete tasks fits perfectly into this \u2014 it would make spec-kit a truly iterative, living system rather than a static generator.",
          "author": {
            "id": 11715325,
            "username": "cookiegg",
            "display_name": "cookiegg",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 09:45:40",
          "updated_at": "2025-10-19 09:45:40",
          "issue_id": 885
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3514391500,
      "number": 880,
      "title": "Spec-kit and Github Issues/Projects",
      "body": "I am all in on spec-kit and what it does. I had done some similar work on the developer side with RooCode and extending RooCommander, but adding this on the project side makes it even better.\n\nMy biggest question is how do you track the progress at the epic and user story levels with spec-kit? It seems you have to go though markdown files on a regular basis, rather than being able to use Github Issues and Projects to track as you normally would. Are there script that could run to populate issues, and then a commit hook to update them?\n\nTrying to figure out how to use the power of spec-kit, while maintaining organization transparency and clarity of where the development process is.",
      "state": "open",
      "created_at": "2025-10-14 15:14:27",
      "updated_at": "2025-10-21 10:26:41",
      "closed_at": null,
      "author": {
        "id": 754,
        "username": "jsgoecke",
        "display_name": "jsgoecke",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 3,
      "comments": [
        {
          "id": 3404827826,
          "body": "I'd caution against locking yourself into github.\n\nIf you just want a kanban board view, then perhaps you'd be better served by https://github.com/MrLesk/Backlog.md\n\nThis is another reason why I really want spec kit to just create tasks as separate files.\n\nI feel like speckits value isn't in task management, it's in project discovery phase and as such it should: \n\n- get rid of its behaviour to create branches\n- store tasks as separate files instead of a checklist inside a single file.",
          "author": {
            "id": 61225,
            "username": "airtonix",
            "display_name": "airtonix",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 06:50:04",
          "updated_at": "2025-10-15 06:52:09",
          "issue_id": 880
        },
        {
          "id": 3404925333,
          "body": "> I'd caution against locking yourself into github.\n\nMe too. But it's sooo tempting. \n\nAnd a strong \"yes, please\" to the rest of it. \ud83d\udc4c Please write specs, but don't try to organize my workflow ... ",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 07:17:34",
          "updated_at": "2025-10-15 07:17:34",
          "issue_id": 880
        },
        {
          "id": 3425850610,
          "body": "I would argue, that at least SpecKit should _optionally_ provide a way to sync tasks with Github Issues. Why? With this, you could even work, when you call it a day, and assign Copilot to those issues, working on features, while you're busy with other stuff.\n\n@airtonix thanks, for pointing towards https://github.com/MrLesk/Backlog.md - which at least makes it easier for now, to track the progress of tasks. But ultimately, when you want to scale SpecKit in big enterprises, there is no way around of connecting the tasks with any of the major ticketing systems (also looking at you, JIRA).\n",
          "author": {
            "id": 1862500,
            "username": "gimmebytes",
            "display_name": "gimmebytes",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 10:26:41",
          "updated_at": "2025-10-21 10:26:41",
          "issue_id": 880
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3513585736,
      "number": 878,
      "title": "Question on Checklist and Domains",
      "body": "I found the video on checklists interesting.   Some questions:\n\n* Is there a list of predefined domains?  \n\n* if domains are user specified, e.g., \"payment system\", \"inventory management\", \"role playing game\", then is there any guidance on what LLMs to use to define the checklist?  I'm assuming a more robust LLM like Claude Sonnet 4 or GPT-5 would generate a better checklist than a get-4o.\n\nI've been testing `spec kit` and can see how it could help in the development process.  \n\nthank you for the work.",
      "state": "open",
      "created_at": "2025-10-14 11:56:22",
      "updated_at": "2025-10-15 11:42:14",
      "closed_at": null,
      "author": {
        "id": 1425269,
        "username": "jimthompson5802",
        "display_name": "jimthompson5802",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3405991498,
          "body": "@monkeycode-ai \u5c1d\u8bd5\u56de\u7b54\u4e00\u4e0b\n",
          "author": {
            "id": 22888111,
            "username": "LydiaCai1203",
            "display_name": "LydiaCai1203",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 11:40:52",
          "updated_at": "2025-10-15 11:40:52",
          "issue_id": 878
        },
        {
          "id": 3405995842,
          "body": "> \u6211\u662f [MonkeyCode AI \u7f16\u7a0b\u52a9\u624b](https://monkeycode-ai.com/)\uff0c\u4f60\u53ef\u4ee5\u5728  GitHub \u4efb\u610f\u4ed3\u5e93\u7684\u4efb\u610f Issue \u6216 PR \u4e2d at @monkeycode-ai \u6765\u547c\u5524\u6211\u3002\n\n> \u4efb\u52a1\u6267\u884c\u7ec6\u8282\u8bf7\u53c2\u8003: [dfb8e6c4-a9bb-11f0-bec9-ee6ce69b85f1](https://monkeycode-ai.com/task?id=dfb8e6c4-a9bb-11f0-bec9-ee6ce69b85f1)\n\n\u5bf9 Issue [github/spec-kit#878](https://github.com/github/spec-kit/issues/878) \u7684\u8bc4\u4f30\u5982\u4e0b\uff1a\n\n1. \u95ee\u9898\u91cd\u8981\u6027\uff1a\u4e2d\u7b49\u3002\u7528\u6237\u8be2\u95ee\u4e86\u5173\u4e8e\u68c0\u67e5\u8868\uff08checklist\uff09\u529f\u80fd\u548c\u57df\uff08domain\uff09\u5b9a\u4e49\u7684\u95ee\u9898\uff0c\u8fd9\u5173\u7cfb\u5230\u5de5\u5177\u7684\u4f7f\u7528\u548c\u7406\u89e3\u3002\n\n2. \u8be6\u7ec6\u5206\u6790\uff1a\n   - \u7528\u6237\u8be2\u95ee\u662f\u5426\u6709\u9884\u5b9a\u4e49\u7684\u57df\u5217\u8868\u3002\n   - \u7528\u6237\u60f3\u77e5\u9053\u5728\u4f7f\u7528\u81ea\u5b9a\u4e49\u57df\uff08\u5982\"payment system\", \"inventory management\", \"role playing game\"\uff09\u65f6\uff0c\u662f\u5426\u6709\u5173\u4e8e\u9009\u62e9 LLM \u7684\u5efa\u8bae\u3002\n   - \u7528\u6237\u7279\u522b\u63d0\u5230\u5047\u8bbe\u66f4\u5f3a\u7684 LLM\uff08\u5982 Claude Sonnet 4 \u6216 GPT-5\uff09\u4f1a\u6bd4\u8f83\u5f31\u7684\u6a21\u578b\uff08\u5982 GPT-4o\uff09\u751f\u6210\u66f4\u597d\u7684\u68c0\u67e5\u8868\u3002\n\n3. \u89e3\u51b3\u65b9\u6848\uff1a\n   - \u5173\u4e8e\u9884\u5b9a\u4e49\u57df\uff1a\u4ee3\u7801\u5e93\u4e2d\u6ca1\u6709\u660e\u786e\u5b9a\u4e49\u9884\u5b9a\u4e49\u57df\u5217\u8868\u3002\u57df\u7684\u6982\u5ff5\u4e3b\u8981\u5728 checklist \u547d\u4ee4\u7684\u6587\u6863\u4e2d\u4f5c\u4e3a\u793a\u4f8b\u63d0\u53ca\uff08\u5982 auth, latency, UX, API\uff09\u3002\n   - \u5173\u4e8e LLM \u9009\u62e9\uff1a\u4ee3\u7801\u5e93\u4e2d\u6ca1\u6709\u660e\u786e\u5efa\u8bae\u4f7f\u7528\u54ea\u79cd LLM \u6765\u751f\u6210\u68c0\u67e5\u8868\u3002\u5de5\u5177\u7684\u8bbe\u8ba1\u539f\u5219\u662f\u751f\u6210\"\u9700\u6c42\u7684\u5355\u5143\u6d4b\u8bd5\"\uff0c\u91cd\u70b9\u5728\u4e8e\u9700\u6c42\u7684\u8d28\u91cf\u800c\u975e\u5b9e\u73b0\u7ec6\u8282\u3002\n   - \u5efa\u8bae\uff1a\u53ef\u4ee5\u8003\u8651\u5728\u6587\u6863\u4e2d\u6dfb\u52a0\u5173\u4e8e\u57df\u5b9a\u4e49\u7684\u66f4\u591a\u6307\u5bfc\uff0c\u4ee5\u53ca\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u9009\u62e9 LLM \u7684\u5efa\u8bae\u3002\n\n\u8be5 Issue \u53ef\u4ee5\u901a\u8fc7\u6587\u6863\u66f4\u65b0\u6765\u89e3\u51b3\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u6211\u5c06\u91c7\u7528 issue_overview \u89d2\u8272\u6765\u5904\u7406\u3002",
          "author": {
            "id": 231811742,
            "username": "MonkeyCode-AI",
            "display_name": "MonkeyCode-AI",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 11:42:12",
          "updated_at": "2025-10-15 11:42:12",
          "issue_id": 878
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3513568235,
      "number": 877,
      "title": "Switch agents without re-initializing the project",
      "body": "I work with a few coding agents and I want to be able to switch the agent without re-initiating the project. e.g. command \"specify agent --claude\" and then when I want to switch to a different agent \"specify agent --gemini\" ",
      "state": "open",
      "created_at": "2025-10-14 11:51:20",
      "updated_at": "2025-10-18 23:49:02",
      "closed_at": null,
      "author": {
        "id": 53312342,
        "username": "JoelGoodman19",
        "display_name": "JoelGoodman19",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 4,
      "comments": [
        {
          "id": 3415166747,
          "body": "I have same question, any idea for best Practice",
          "author": {
            "id": 34543831,
            "username": "Rabithua",
            "display_name": "Rabithua",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 11:43:25",
          "updated_at": "2025-10-17 11:43:25",
          "issue_id": 877
        },
        {
          "id": 3415762029,
          "body": "Yeah this would be great - I currently have a claude pro sub as well as a github copilot pro sub, with the current usage issues on claude and the spec-kit being pretty token heavy it would be great to fall back to copilot and continue working",
          "author": {
            "id": 8689771,
            "username": "mitchstapleton",
            "display_name": "mitchstapleton",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 14:07:06",
          "updated_at": "2025-10-17 14:07:06",
          "issue_id": 877
        },
        {
          "id": 3418768738,
          "body": "This approach has worked for me in an existing spec-kit project:\n\n`specify init --here --ai <new-agent> --no-git`\n\nE.g. for codex, this added the `.codex` folder. It also updated `.specify/scripts` and `.specify/templates` with the latest from the spec-kit github repo.\n\nNote this also overwrites `.specify/memory/constitution.md` to the initial empty version, this needs to be reverted in an existing spec-kit project:\n\n`git restore .specify/memory/constitution.md`\n\nCan also run `.specify/scripts/bash/update-agent-context.sh codex` to generate / update AGENTS.md; presumably that would happen autoamtically on subsequent `/speckit.specify` invocation",
          "author": {
            "id": 176869,
            "username": "gjmorris",
            "display_name": "gjmorris",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 19:49:25",
          "updated_at": "2025-10-18 23:49:02",
          "issue_id": 877
        },
        {
          "id": 3418820865,
          "body": "Yes, I have done that as well as a workaround. it's just less user friendly.",
          "author": {
            "id": 53312342,
            "username": "JoelGoodman19",
            "display_name": "JoelGoodman19",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 21:09:39",
          "updated_at": "2025-10-18 21:09:39",
          "issue_id": 877
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3513495945,
      "number": 876,
      "title": "My biggest problem with \"spec-kit/vibe code\"",
      "body": "I'm having a lot of trouble between each spec round, not maintaining consistency between the features/behaviors defined in a previous spec. I'll give a brief example:\n\n- In one spec, I created a \"Chatgpt-like\" Agent UI page, with parallel title creation and LLM token streaming. I created a detailed definition of each aspect of the page and had to make some adjustments in the end, but it worked as expected.\n\n- In the second spec, I needed to make some changes to the structure to save more metadata and create a view of this metadata. As a result, the behavior defined in the previous spec was completely broken, and I ended up struggling with \"vibe code\" and manual adjustments to return to the previous behavior.\n\nI believe some mechanism where the spec updates behaviors to be followed could mitigate this.\n\nAdditionally, I appreciate the work; I'm very excited about the spec-kit progress.",
      "state": "open",
      "created_at": "2025-10-14 11:27:48",
      "updated_at": "2025-10-18 11:14:24",
      "closed_at": null,
      "author": {
        "id": 14003130,
        "username": "Cliveburr",
        "display_name": "Cliveburr",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3408978597,
          "body": "I've gotten farther with this tool than any other so far in terms of building software with AI. However, the first time through building a simple application, the LLM got to a working solution but there were issues. It didn't maintain consistency between files; its data model was inadequate; I didn't establish a strong enough testing framework for the LLM; it didn't consistently check items off its checklists (though it sorta followed the list of tasks and phases).\n\nWhat I am thinking is that I have to feed some of that back into as second attempt at implementation: explicitly give it a template/example against which to write files; provide it with a complete data model; work out a better strategy for testing what was a UI-heavy application. Now...it might just throw up a new set of problems, and the number of iterations might exceed the time I would have spent writing the app myself. I don't know. But it still seemed there were too many ways, even with spec kit, to go off the rails. (I mean, it did build a simple but non-trivial application with persistence and UI, so everything is relative, and I do think this is a promising line of experimentation!)",
          "author": {
            "id": 5427867,
            "username": "alxdark",
            "display_name": "alxdark",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 02:57:55",
          "updated_at": "2025-10-16 03:00:01",
          "issue_id": 876
        },
        {
          "id": 3418253199,
          "body": "I've found some issue effectively using this as well. I am more of a novice with programming. So spec kit is exciting for me. I've never had real success getting anything more then buggy spaghetti code from AI before. So I really gave this a shot.\n\nFirst attempt I used gpt-5 for the plan, and gpt-5-codex for the implementation step. I defined the finished product for the first spec. I just wanted a python person detection on a RTSP stream in a web UI.\n\nFirst try didn't work.\n\nSo my second attempt I tried gpt-5 for the plan and sonnet 4.5 for the code. (Expensive!) This time I was going to split it into steps. First spec was just a web server with a counter app and a button to increment it. It worked!\n\nBut the second step, was to replace the counter with a RTSP stream page. Just to add a stream and view it.\n\nSpaghetti code. Crashes, and trying to get it to bug fix... What I nightmare. Circular attempts at fixing it.\n\nI suspect this is the spec continuity problem you are seeing.\n\nI was thinking another command would be helpful too like /bugfix. So you can describe the problem, provide details, and then it can follow the constitution and stuff and do a better job then me just telling it \"here are the logs, help me fix it\"",
          "author": {
            "id": 48876201,
            "username": "clsferguson",
            "display_name": "clsferguson",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 11:14:23",
          "updated_at": "2025-10-18 11:14:23",
          "issue_id": 876
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3513365635,
      "number": 875,
      "title": "Can you add support for iFlow?",
      "body": "Can you add support for iFlow? It currently doesn't work properly in iFlow, and I really hope it can support iFlow.\nhttps://platform.iflow.cn/cli/quickstart\nhttps://github.com/iflow-ai/iflow-cli",
      "state": "open",
      "created_at": "2025-10-14 10:46:42",
      "updated_at": "2025-10-16 16:06:57",
      "closed_at": null,
      "author": {
        "id": 14037553,
        "username": "freefoxcm",
        "display_name": "freefoxcm",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3404415218,
          "body": "\u641e\u5b9a\u4e86\u5417\uff1f\u81ea\u5df1\u5f04\u4e00\u4e0b",
          "author": {
            "id": 4860288,
            "username": "gogojames",
            "display_name": "gogojames",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 03:51:51",
          "updated_at": "2025-10-15 03:51:51",
          "issue_id": 875
        },
        {
          "id": 3411616416,
          "body": "Apparently there is already an initial effort https://github.com/github/spec-kit/pull/262  which is being actively worked on",
          "author": {
            "id": 772735,
            "username": "stefanocrosta",
            "display_name": "stefanocrosta",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 16:06:57",
          "updated_at": "2025-10-16 16:06:57",
          "issue_id": 875
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3513216160,
      "number": 874,
      "title": "Multiple Branch Creation",
      "body": "Whenever I run specify, it is creating multiple branches instead of one branch.\n\nBelow is the command which I gave\n\nFollow instructions in [speckit.specify.prompt.md].\nMigrate the project to Java 21 and Spring boot 3.5.6. There shouldn't be any change on endpoints or business logics\n\nIt says, The script didn't produce the expected JSON output. Let me check if the script exists and run it properly: and started creating another branch.\n\nAlso for branch name, use copilot to come up with the branch name instead of taking it from spec whatever we provide",
      "state": "open",
      "created_at": "2025-10-14 09:59:03",
      "updated_at": "2025-10-14 09:59:03",
      "closed_at": null,
      "author": {
        "id": 26540475,
        "username": "johnvinosh",
        "display_name": "johnvinosh",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3512379217,
      "number": 872,
      "title": "Upgrade command documentation is verbose and inconsistent with uv standards",
      "body": "# Upgrade command documentation is verbose and inconsistent with uv standards\n\n## Problem (User Journey)\n\nI am a user who has installed Spec Kit using the persistent installation method with `uv tool install`. When I want to upgrade to the latest version, I refer to the \"Get started\" section for the upgrade instructions.\n\nAfter installing with `uv tool install`, the documentation shows:\n\n```bash\nTo upgrade specify run:\n\nuv tool install specify-cli --force --from git+https://github.com/github/spec-kit.git\n```\n\nHowever, the **correct and much simpler command** is:\n```bash\nuv tool upgrade specify-cli\n```\n\nThis simpler command is mentioned in passing in the \"Benefits of persistent installation\" list but is **not shown as the actual upgrade instruction**. New users following the documented upgrade process will use the unnecessarily verbose `--force` method instead of the proper `uv tool upgrade` command.\n\nThis creates a poor user experience because:\n- Users have to type a long, complex command every time they want to upgrade\n- The documented command doesn't follow uv's standard tool management patterns\n- It's inconsistent with the \"Better tool management with `uv tool upgrade`\" benefit mentioned in the same section\n- Users may not realize the simpler `uv tool upgrade` command exists\n\n## Current Documentation\n\n**Upgrade instruction currently shows:**\n\n```bash\nTo upgrade specify run:\n\nuv tool install specify-cli --force --from git+https://github.com/github/spec-kit.git\n```\n\n**The \"Benefits\" section mentions (but doesn't use in the actual instructions):**\n```\nBetter tool management with uv tool list, uv tool upgrade, uv tool uninstall\n```\n\n## Suggestion\n\nUse the standard `uv tool upgrade` command instead of the verbose `--force` method:\n\nReplace the verbose upgrade instruction with the proper `uv tool upgrade` command:\n\n**Current (verbose and non-standard):**\n```bash\nTo upgrade specify run:\n\nuv tool install specify-cli --force --from git+https://github.com/github/spec-kit.git\n```\n\n**Proposed (standard uv tool workflow):**\n```bash\nTo upgrade specify run:\n\nuv tool upgrade specify-cli\n```\n\nThis change would:\n- \u2705 Use the standard `uv tool upgrade` command as documented by [uv](https://docs.astral.sh/uv/concepts/tools/#upgrading-tools)\n- \u2705 Be consistent with the \"tool management\" benefits mentioned in the same section\n- \u2705 Simplify the user experience (shorter, easier to remember)\n- \u2705 Align with how other uv-based tools document upgrades\n- \u2705 Follow the principle of least surprise for users familiar with uv\n\n## Example of Correct Command\n\nHere's what the upgrade process looks like with the proper command:\n\n```bash\n$ uv tool upgrade specify-cli\n    Updated https://github.com/github/spec-kit.git (b702fcbbc0c03387ffd99da16d4d6cc292cd7cfe)\n      Built specify-cli @ git+https://github.com/github/spec-kit.git@b702fcbbc0c03387ffd99da16d4d6cc292cd7cfe\nUpdated specify-cli v0.0.17 -> v0.0.19\n...\nInstalled 1 executable: specify.exe\n```\n\nClean, simple, and follows uv conventions.\n\n## AI Assistance Disclosure\n\nThis issue was identified and drafted with assistance from GitHub Copilot, but was validated by manual review of the README structure and comparison with the user experience.\n",
      "state": "open",
      "created_at": "2025-10-14 05:10:16",
      "updated_at": "2025-10-14 05:10:16",
      "closed_at": null,
      "author": {
        "id": 198812684,
        "username": "fhemmerrelias",
        "display_name": "fhemmerrelias",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3512363516,
      "number": 870,
      "title": "\"Get started\" section doesn't show `specify init .` option for initializing in current directory",
      "body": "# \"Get started\" section doesn't show `specify init .` option for initializing in current directory\n\n## Problem (User Journey)\n\nFollowing the \"Get started\" section in the README to set up Spec Kit I noticed the following:\n\nIn the **\"1. Install Specify\"** section, after installing the tool, the example immediately shows:\n\n```bash\nspecify init <PROJECT_NAME>\nspecify check\n```\n\nThis presents **only** the \"create new project directory\" syntax. I naturally assume this is the only way to initialize a project and that I must create a new directory.\n\nHowever, the ability to initialize in the current directory using `specify init .` (or `specify init --here`) is an equally important option that many users need, especially when:\n- Working with existing projects (brownfield development, which the README explicitly supports)\n- Adding Spec Kit to an already-created directory\n- Following mono-repo workflows\n\nThis alternative syntax is **only documented much later** in two places:\n1. The \"\ud83d\udd27 Specify CLI Reference\" section (which users may not read if they just want to get started quickly)\n2. The expandable \"\ud83d\udccb Detailed process\" section\n\nBy the time users discover this option exists, they may have already created an unnecessary wrapper directory or abandoned trying to use Spec Kit with their existing project.\n\n## Current Documentation\n\n**\"Get started\" section currently shows:**\n```bash\nThen use the tool directly:\n\nspecify init <PROJECT_NAME>\nspecify check\n```\n\n**CLI Reference section (much later) shows:**\n```bash\n# Initialize in current directory\nspecify init . --ai copilot\n# or use the --here flag\nspecify init --here --ai copilot\n```\n\n## Suggestion\n\nUpdate the \"Get started\" section to show **both options** upfront, similar to how the detailed section presents them. This would immediately make users aware of their choices at the critical first step.\n\n**Proposed change for the \"Get started\" \u2192 \"1. Install Specify\" section:**\n\n```bash\nThen use the tool directly:\n\n# Create a new project directory\nspecify init <PROJECT_NAME>\n\n# Or initialize in current directory\nspecify init .\n\n# Check installed tools\nspecify check\n```\n\nThis small change would:\n- \u2705 Prevent confusion for users with existing projects\n- \u2705 Make the brownfield use case more discoverable upfront\n- \u2705 Align with user expectations (many CLI tools show common usage patterns early)\n- \u2705 Reduce friction for adoption in existing codebases\n\n## Related Context\n\n- Issue #52 discussed the feature implementation and included requests to make this clearer in documentation\n- The README's \"Development phases\" section explicitly mentions \"Iterative Enhancement (Brownfield)\" as a supported use case, but this isn't obvious from the quick start\n\n## AI Assistance Disclosure\n\nThis issue was identified and drafted with assistance from GitHub Copilot, but was validated by manual review of the README structure and comparison with the user experience.\n",
      "state": "open",
      "created_at": "2025-10-14 05:01:35",
      "updated_at": "2025-10-14 05:01:35",
      "closed_at": null,
      "author": {
        "id": 198812684,
        "username": "fhemmerrelias",
        "display_name": "fhemmerrelias",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3511143228,
      "number": 865,
      "title": "Spec Kit slash commands don't work in Copilot",
      "body": "I'm not sure if the issue is with Spec Kit or GitHub Copilot. When I try to load a project up in Copilot, no `/speckit.*` commands are available. They work just fine in Claude Code. I've run `specify init` in each case, choosing Copilot (as well as Claude Code).\n\nI've seen this issue on two different machines and three different projects. I've upgraded to the most recent versions of specify and copilot, but the problem persists.",
      "state": "closed",
      "created_at": "2025-10-13 18:58:08",
      "updated_at": "2025-10-15 19:15:57",
      "closed_at": "2025-10-15 19:15:57",
      "author": {
        "id": 160765063,
        "username": "GC-Scott",
        "display_name": "GC-Scott",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9247173061,
          "name": "needs-author-response",
          "color": "dd6b1d",
          "description": ""
        }
      ],
      "comment_count": 7,
      "comments": [
        {
          "id": 3399271309,
          "body": "I upgraded on `Claude` \n\nI had to run `specify init --here --force --ai claude`\n\nThen remove the old commands manually.\nThe `--force` was the magic.\n",
          "author": {
            "id": 1987013,
            "username": "josecoelho",
            "display_name": "josecoelho",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 22:36:26",
          "updated_at": "2025-10-13 22:36:26",
          "issue_id": 865
        },
        {
          "id": 3399408713,
          "body": "I am assuming you mean Copilot CLI. It does looks like Copilot CLI does not have support for slash commands. You can use speckit with Copilot chat (the \n\n<img width=\"739\" height=\"1219\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/1d17f970-8dc2-44a2-aba9-c29e0f1c0bac\" />",
          "author": {
            "id": 17687672,
            "username": "varunr89",
            "display_name": "varunr89",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 23:39:22",
          "updated_at": "2025-10-13 23:39:22",
          "issue_id": 865
        },
        {
          "id": 3399558005,
          "body": "@GC-Scott are you opening the project folder when going to Copilot? And as @varunr89 called out - are you using the GitHub Copilot CLI by chance?",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 00:48:38",
          "updated_at": "2025-10-14 00:48:38",
          "issue_id": 865
        },
        {
          "id": 3401594395,
          "body": "I've been using the Copilot CLI, since I've never seen the VS Code extension try to modify code as autonomously as Spec Kit enables. But I've verified that I see the slash commands in the VS Code extension. The CLI *does* support slash commands, as hitting `/` brings up a menu of options, but I guess it doesn't support speckit's slash commands.\n\nThanks for your help!",
          "author": {
            "id": 160765063,
            "username": "GC-Scott",
            "display_name": "GC-Scott",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 12:36:01",
          "updated_at": "2025-10-14 12:36:01",
          "issue_id": 865
        },
        {
          "id": 3403310703,
          "body": "The issue is with Github Copilot CLI still doesn't support 'custom' slash commands like Claude Code or Codex CLI; i would be surprised if it's not being added soon though.  If you want to use github copilot with spec kit you have to use copilot chat. Honestly I have found Github Copilot CLI to be lacking in features and the chat to be a much better experience. However, I also do prefer CLI tools so mostly use Claude Code. ",
          "author": {
            "id": 17687672,
            "username": "varunr89",
            "display_name": "varunr89",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 19:32:11",
          "updated_at": "2025-10-14 19:32:11",
          "issue_id": 865
        },
        {
          "id": 3404265198,
          "body": "not working /speckit\n<img width=\"748\" height=\"1002\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/2ffdad2a-1896-46f8-9dff-21a86e1ce5b4\" />",
          "author": {
            "id": 20192431,
            "username": "sh1man999",
            "display_name": "sh1man999",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 02:16:07",
          "updated_at": "2025-10-15 02:16:07",
          "issue_id": 865
        },
        {
          "id": 3407654501,
          "body": "@sh1man999 please make sure that you are opening the project folder to see the commands.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 18:00:08",
          "updated_at": "2025-10-15 18:00:08",
          "issue_id": 865
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3510619462,
      "number": 860,
      "title": "[Experience Report] 2 months intensive Spec Kit usage by non-technical user",
      "body": "## \ud83d\udc4b Context\n- **Profile**: Non-technical (zero coding experience)\n- **Tools used**: Claude Code + Spec Kit (transitioned from Super Claude)\n- **Project**: File sharing system (Rust/SvelteKit)\n- **Duration**: ~2 months, 6 features created\n- **Transparency**: This project was built 100% with AI assistance\n\n## \ud83c\udfaf Why I'm sharing this\nSpec Kit enabled me to build a production system without coding knowledge. \nI've identified patterns (both positive and problematic) that could help \nimprove the framework for other non-technical users.\n\n## \ud83d\udcca Quick Metrics\n| Feature | Spec Lines | Tasks | Status |\n|---------|-----------|-------|--------|\n| 009     | 420       | 46    | \u2705     |\n| 014     | 873       | 163   | WIP    |\n\n**Complexity escalation observed**: +107% (spec) and +254% (tasks)\n\n## \u2b50 What Works Exceptionally Well\n1. **Project Constitution** (emergent pattern not in docs)\n   - Created 454-line constitution with 7 measurable principles\n   - Feature 014 entirely dedicated to reaching 100% compliance\n   \n2. **Structured User Stories with Priorities**\n   - P0/P1/P2 system works brilliantly for incremental delivery\n   \n3. **Clarifications Documentation** (spontaneous addition)\n   - Added Q&A sections naturally to specs\n   - Not in template but highly valuable\n\n## \u26a0\ufe0f Friction Points Identified\n1. **Uncontrolled complexity escalation**\n   - 420 lines \u2192 873 lines for similar features\n   - No guidance on \"appropriate size\"\n   \n2. **Bug-fix workflow inadequate**\n   - Feature 013: 142L spec but 0 tasks\n   - Framework optimized for new features, not bugs\n\n3. **Over-specification risk for non-technical users**\n   - Without experience, hard to know when to stop detailing\n\n## \ud83d\udca1 Concrete Recommendations\n1. **Quick win**: Add \"Clarifications\" section to spec-template.md\n2. **Medium**: Create bug-fix-template.md alternative\n3. **Long-term**: Document \"Constitution\" pattern with examples\n\n## \ud83d\udcdd Full Analysis Available\nI've prepared a detailed analysis (2600+ words) with:\n- Complete metrics for all 6 features\n- Code examples from actual specs\n- Detailed recommendations with templates\n\n**Question for maintainers**: Would you prefer I:\n- A) Post full analysis here (long but comprehensive)\n- B) Link to external document (GitHub Gist or Google Doc)\n- C) Break into multiple focused issues\n\nI want to contribute constructively without creating noise.\nHappy to iterate based on your preferences!\n\n---\n*Built with: Rust/Actix-web backend, SvelteKit frontend, all guided by Spec Kit + Claude Code*",
      "state": "open",
      "created_at": "2025-10-13 16:04:33",
      "updated_at": "2025-10-18 11:27:20",
      "closed_at": null,
      "author": {
        "id": 6767881,
        "username": "Captainhum",
        "display_name": "Captainhum",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3404900266,
          "body": "> I want to contribute constructively without creating noise.\n\nThen please just take ten to fifteen minutes and type up your experience installing spec-kit. What worked, how pleasent was the install, did you upgrade it mid-project, how did you transition from one feature to the next, did you update your constitution, how much manual corrections did you have to do?\n\nWe all have LLMs and can make them create this AI-slop executive summaries. This of no benefit to the project. Human input is valued though. \ud83e\udd17 ",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 07:09:26",
          "updated_at": "2025-10-15 07:09:26",
          "issue_id": 860
        },
        {
          "id": 3405314837,
          "body": "Thanks for the feedback. Here's my experience:\n\n**1) Installation:**\n\nI don't have any particular memory of it, so I think it was relatively straightforward.\n\n**2) Upgrading mid-project:**\n\nUpgrading was messy. There's no simple update command like specify update or a way to check the current version with specify --version. When I saw there were updates to the repo, I had to run the full init command again with --force flag:\n\nuvx --from git+https://github.com/github/spec-kit.git specify init --ai claude --no-git --here --force\n\nThis works, but it's not intuitive. The only way I know it's downloading the latest version is by seeing it in the logs during reinstallation. It would be better to have a simple update command or version check.\n\n**3) Transitioning from one feature to the next:**\n\nI created 6 features (009-014) over about 8 active days. The workflow was sequential - I'd finish one feature completely before starting the next. Each feature was broken down into numbered phases (Phase 2, Phase 3.1, etc.), and I used TDD approach (writing tests before code). \n\nI made a new spec kit when adding new functionality or fixing bugs that I couldn't resolve with just Claude Code commands.\n\nThe transitions were clean - I'd complete all tasks in one feature before moving to the next.\n\n**4) Constitution updates:**\n\nYes. I created a constitution.md file (454 lines) on September 19th with 7 strict measurable principles covering code quality, security, performance, architecture, tech stack, documentation, and CI/CD. I updated it 3 times during the project as the system evolved (added CI/CD rules, admin interface standards, etc.). \n\nFeature 014 was entirely dedicated to achieving 100% constitutional compliance - it audited 19 violations and fixed them all.\n\n**5) Manual corrections:**\n\nVery few actually. Out of 111 commits, only about 8-10 (around 7-9%) were manual corrections. Most corrections were Clippy warnings (4 major cleanup commits reducing from 83 warnings to 0), upload bugs where I had to fix login module issues and authentication problems manually, and test helpers where I added allow dead_code annotations.\n\nThe spec to plan to tasks workflow really limited the need for manual fixes. When I did need corrections, it was usually after a few tests revealed errors, then I'd redo a spec kit for that fix.\n\n**Additional observations:**\n\nSpec size evolution was interesting. I started with feature 009 at 420 lines (complex initial setup), then features 011-013 averaged around 150 lines as I learned to write more focused specs. Feature 014 exploded to 873 lines, but that was intentional because it was a comprehensive constitutional compliance audit covering the entire codebase.\n\nThe workflow kept me disciplined with frequent checkpoints tracking completion percentages for each phase.",
          "author": {
            "id": 6767881,
            "username": "Captainhum",
            "display_name": "Captainhum",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 08:58:31",
          "updated_at": "2025-10-15 08:58:31",
          "issue_id": 860
        },
        {
          "id": 3418286027,
          "body": "Is it possible to share the constitution or the project?\n\nI'd really like to see how you managed things.\n\nI agree with the /bugfix command to run post /implement!",
          "author": {
            "id": 48876201,
            "username": "clsferguson",
            "display_name": "clsferguson",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-18 11:27:20",
          "updated_at": "2025-10-18 11:27:20",
          "issue_id": 860
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3510053318,
      "number": 859,
      "title": ".vscode/settings.json is overwritten",
      "body": "Looks like .vscode/settings.json is fully overwritten. Would be good to merge in case the repo already has a .vscode/settings.json.",
      "state": "closed",
      "created_at": "2025-10-13 13:20:38",
      "updated_at": "2025-10-17 17:42:31",
      "closed_at": "2025-10-17 17:42:31",
      "author": {
        "id": 8092238,
        "username": "brentrossen",
        "display_name": "brentrossen",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        }
      ],
      "comment_count": 2,
      "comments": [
        {
          "id": 3399559235,
          "body": "Thanks @brentrossen - will actually work on adding that logic in. Appreciate the callout.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 00:49:27",
          "updated_at": "2025-10-14 00:49:27",
          "issue_id": 859
        },
        {
          "id": 3411663575,
          "body": "Hi @localden, hope you are doing well. I occurred this issue today, after I reviewed the source code, I have sent an MR for this issue, please kindly check whether fix this issue, thanks.",
          "author": {
            "id": 9159452,
            "username": "isdaniel",
            "display_name": "isdaniel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 16:19:41",
          "updated_at": "2025-10-16 16:19:41",
          "issue_id": 859
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3509296592,
      "number": 857,
      "title": "Feature request: support Shinkuro",
      "body": "[Shinkuro](https://github.com/DiscreteTom/shinkuro) is a MCP server that can transform spec-kit file based prompts to MCP prompts, while exposing parameters correctly.\n\nBy integrating Shinkuro, any AI agent that support parameterized MCP prompts can use spec-kit instructions. \n\nE.g. Amazon Q Developer CLI can take Shinkuro as the bridge to use spec-kit, blog post: https://builder.aws.com/content/340N9HBJrATkUOgwWLcuL1V4FmI/using-spec-kit-with-amazon-q-developer-cli-bridging-the-gap-with-shinkuro\n\nThe integration is simple, during `specify init` just store prompts inside `.shinkuro/prompts/` folder, and configure the Shinkuro MCP server to load from it:\n\n```json\n{\n  \"mcpServers\": {\n    \"shinkuro\": {\n      \"command\": \"uvx\",\n      \"args\": [\"shinkuro\"],\n      \"env\": {\n        \"FOLDER\": \"./.shinkuro/prompts\",\n        \"VARIABLE_FORMAT\": \"dollar\",\n        \"AUTO_DISCOVER_ARGS\": \"true\",\n        \"SKIP_FRONTMATTER\": \"true\"\n      }\n    }\n  }\n}\n```",
      "state": "closed",
      "created_at": "2025-10-13 09:57:53",
      "updated_at": "2025-10-14 01:05:17",
      "closed_at": "2025-10-14 00:52:13",
      "author": {
        "id": 28821990,
        "username": "DiscreteTom",
        "display_name": "DiscreteTom",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3399565081,
          "body": "Thank you for the suggestion, @DiscreteTom - at this time, we won't be adding support for one-off personal projects, unfortunately.\n\nThe current plan is to only lean on more established coding agents or actively supported open-source projects.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 00:52:13",
          "updated_at": "2025-10-14 00:52:13",
          "issue_id": 857
        },
        {
          "id": 3399584248,
          "body": "Understand. Thanks for the response.",
          "author": {
            "id": 28821990,
            "username": "DiscreteTom",
            "display_name": "DiscreteTom",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 01:05:17",
          "updated_at": "2025-10-14 01:05:17",
          "issue_id": 857
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3508721592,
      "number": 856,
      "title": "Support non-ASCII languages in automatic branch name generation",
      "body": "## Problem\n\nWhen using non-ASCII characters (Japanese, Chinese, Korean, etc.) in feature descriptions with `/speckit.specify`, automatic branch name generation fails or produces meaningless branch names.\n\n**Example:**\n```bash\n/speckit.specify \"\u30e6\u30fc\u30b6\u30fc\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\"\n# Results in: 001--- (empty or only hyphens)\n```\n\n## Expected Behavior\n\nThe system should generate meaningful English branch names from any language:\n\n```bash\n/speckit.specify \"\u30e6\u30fc\u30b6\u30fc\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\"\n# Should generate: 001-implement-user-login\n```\n\n## Proposed Solution\n\n1. **AI-driven branch name generation**: AI analyzes the description and generates appropriate English kebab-case branch names\n2. **Enhanced script parameters**: Add `--branch-name` and `--description` to `create-new-feature.{sh,ps1}`\n3. **Better Unicode handling**: Use `iconv` (bash) and normalization (PowerShell)\n4. **Fallback**: Generate hash-based names when conversion fails\n\n## Files to Change\n\n- `templates/commands/specify.md`\n- `scripts/bash/create-new-feature.sh`\n- `scripts/powershell/create-new-feature.ps1`\n\n## Benefits\n\nEnables international teams to describe features in their native language while maintaining English git branch naming conventions.\n\n---\n**Note**: This issue description was drafted with assistance from Claude AI.",
      "state": "open",
      "created_at": "2025-10-13 06:58:07",
      "updated_at": "2025-10-13 06:58:07",
      "closed_at": null,
      "author": {
        "id": 38449219,
        "username": "codyNog",
        "display_name": "codyNog",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3508489183,
      "number": 855,
      "title": "Help \"silent\" LLMs give better feedback",
      "body": "# The Problem\n\nClaude is that chirpy little friend who won't shut up, even when you want them to. Gets annoying at times, but I can always see what it's doing.\n\nWhen I'm implementing something using ChatGPT 5 Codex, it's Silent Bob. I see that it's reading files, modifying files, running commands, etc., but since this model is so terse in its communication, I have no idea **what** it's doing.\n\n# The Solution\n\nUpdate the \"implement\" prompt to instruct the LLM to give a concise explanation of the next task before it begins work. Perhaps add in a that it should routinely give a brief explanation of what it's doing while working on a task. I'll at least have a rough understanding of what's happening, even if I don't have the details.\n",
      "state": "open",
      "created_at": "2025-10-13 05:15:57",
      "updated_at": "2025-10-15 13:02:48",
      "closed_at": null,
      "author": {
        "id": 24634,
        "username": "Ovid",
        "display_name": "Ovid",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3404907700,
          "body": "Please don't. I really like the silence.\n\nCan you not just add this to your Agents.md? You must have this problem within other projects as well, no? Not only those who run sepc-kit. \n\nI don't think it's a spec frameworks task to regulate the LLMs verboseness. \n\nPS: How you get 5 codex to shut up? \ud83d\ude48 \ud83d\ude02  For high I was able to configure the reasoning output. In codex they removed that. :-/",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 07:11:51",
          "updated_at": "2025-10-15 07:11:51",
          "issue_id": 855
        },
        {
          "id": 3405715690,
          "body": "@foertel The silence is a problem because sometimes, the LLM is doing stupid things. Sometimes it's because my spec is wrong. Sometimes \"context drift\" from the context filling up causes the LLM to get confused. When there are some comments explaining what it's doing, I can stop things and put stuff right *before* the LLM is finished and I notice I have a pile 'o junk on my hands.",
          "author": {
            "id": 24634,
            "username": "Ovid",
            "display_name": "Ovid",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 10:28:13",
          "updated_at": "2025-10-15 10:28:13",
          "issue_id": 855
        },
        {
          "id": 3406351448,
          "body": "I totally get, why you would want to see more output. I just don't think it is you spec writing frameworks job to configure that. \ud83d\ude0a ",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 13:02:48",
          "updated_at": "2025-10-15 13:02:48",
          "issue_id": 855
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3508420547,
      "number": 854,
      "title": "Custom slash commands changed for codex-cli 0.46.0",
      "body": "Here is how to reproduce this issue:\n\n```sh\nmkdir temp1\ncd temp1\n```\n\n```sh\nspecify init --ai codex --script sh --debug --here\n```\n\n<img width=\"1646\" height=\"440\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f7bc6664-c675-4dc7-a7be-cb7b2a3da07f\" />\n\n```sh\n# Set CODEX_HOME environment variable before running Codex\nexport CODEX_HOME=$PWD/.codex\n```\n\n```sh\n# Start Codex CLI\ncodex --yolo\n```\n\nEnter `/spec` in the TUI to list all custom slash commands:\n\n<img width=\"1061\" height=\"407\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0437151f-a463-4645-a7ff-ac48af74d048\" />\n\nI use `/speckit.constitution` as an example, the full slash command in the Codex CLI should be `/prompts:speckit.constitution` now. I think the hint text of the `specify init` command output might need to change a bit.\n\n\n",
      "state": "open",
      "created_at": "2025-10-13 04:31:36",
      "updated_at": "2025-10-13 15:01:01",
      "closed_at": null,
      "author": {
        "id": 88981,
        "username": "doggy8088",
        "display_name": "doggy8088",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3397887293,
          "body": "after added --yolo the slash command appeared",
          "author": {
            "id": 87459440,
            "username": "wisnubjoey",
            "display_name": "wisnubjoey",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 15:01:01",
          "updated_at": "2025-10-13 15:01:01",
          "issue_id": 854
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3508208952,
      "number": 853,
      "title": "Establish Guidelines for Global Project Documentation Consistency",
      "body": "Currently, Spec-Driven Development in this project encourages creating a separate spec subdirectory for each feature or change. However, there is no clear guideline regarding maintaining a unified, consistent global project documentation that covers the overall architecture, conventions, and integration of all specs.\n\nThis can lead to fragmentation and make it challenging for contributors to get an overview or ensure documentation consistency across the project.\n\n**Proposal:**\n- Define clear recommendations or policies for maintaining a global documentation file (e.g., SPECIFICATION.md or docs/overview.md) at the project root.\n- Describe how individual specs should relate to or be referenced from the global documentation.\n- Consider tooling or scripts to help aggregate/validate spec subdirectories and keep the global documentation up to date.\n- Optionally, add a section to AGENTS.md or README.md explaining best practices for keeping documentation consistent and aligned across the repository.\n\n**Benefits:**\n- Improves discoverability and onboarding for new contributors.\n- Ensures architectural coherence and prevents documentation drift.\n- Facilitates large-scale refactoring and cross-cutting changes.\n\nWould the maintainers be open to establishing such guidelines or automation for documentation consistency?",
      "state": "closed",
      "created_at": "2025-10-13 01:57:44",
      "updated_at": "2025-10-13 17:28:08",
      "closed_at": "2025-10-13 03:14:04",
      "author": {
        "id": 6207775,
        "username": "JaysonAlbert",
        "display_name": "JaysonAlbert",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3395721358,
          "body": "duplicate of #620 ",
          "author": {
            "id": 6207775,
            "username": "JaysonAlbert",
            "display_name": "JaysonAlbert",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 03:14:57",
          "updated_at": "2025-10-13 03:14:57",
          "issue_id": 853
        },
        {
          "id": 3397710274,
          "body": "I think there is two spec-driven dev approaches:\n\n- **\"A single, generative, source-of-truth spec that rebuilds the system\"**: One global documentation describing behavior, and to change the code we would need to change this centralized spec (or documentation) and \"rebuild it\" and it will re-generated partially or completely the system with the new behavior or updated current behaviour. Sounds to me that this is not the current intent, and we don't have enough agent capacity for this approach yet.\n\n- **\"A feature-level spec-first loop where specs serve as the development driver\":** Drive the feature development cycle using spec-first, developing each feature in a defined cycle spec->plan->task->implement, and then these specs at scale will work more as a development history log than the actually system behavior overview and spec. This is where the spec-kit fits really well for me. \n\nI am not sure if Spec-Kit aim to address the first point, I think it is an amazing tool to work as described in the second approach.\n\nIn certain degree this is exactly how companies work with PRDs and TDDs, we still need to keep a doc to describe the system current and overall behaviors.\n\nWould love to get @localden vision on that.",
          "author": {
            "id": 20674439,
            "username": "wilsonneto-swe",
            "display_name": "wilsonneto-swe",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 14:12:47",
          "updated_at": "2025-10-13 17:28:08",
          "issue_id": 853
        },
        {
          "id": 3397918513,
          "body": "That's an excellent distinction. From my experience, even when following a feature-level, spec-driven process, centralized documentation remains essential. This is particularly true for brownfield projects where both developers and AI need a single source of truth to understand the existing architecture, identify what needs to be modified for a new feature, and adhere to established conventions.\n\nFurthermore, if we intend to maintain these PRDs, it would be far more efficient to use a unified toolset rather than managing them across multiple, separate systems.",
          "author": {
            "id": 6207775,
            "username": "JaysonAlbert",
            "display_name": "JaysonAlbert",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 15:09:44",
          "updated_at": "2025-10-13 15:11:01",
          "issue_id": 853
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3507510530,
      "number": 852,
      "title": "Speckit not working in Cursor 1.7.44",
      "body": "Trying to use speckit with cursor. Cursor is not recognizing the speckit commands.\n\nFor instance, speckit.specify results in the cursor agent installing dependencies instead of producing the specification.\n\nIf there are additional setup requirements for Cursor, please make sure to include them in the instructions.\n\n## Cursor version details:\n```\nVersion: 1.7.44\nVSCode Version: 1.99.3\nCommit: 9d178a4a5589981b62546448bb32920a8219a5d0\nDate: 2025-10-10T15:43:37.500Z (2 days ago)\nElectron: 34.5.8\nChromium: 132.0.6834.210\nNode.js: 20.19.1\nV8: 13.2.152.41-electron.0\nOS: Darwin arm64 24.6.0\n```\n\n## Specify-cli: \n`specify-cli==0.0.19 (from git+https://github.com/github/spec-kit.git@e65660ffc3ce5c1ac83451dad041e29ef2b46ad0)`\n\n## Install\n<img width=\"1702\" height=\"1205\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/83f0d192-fe90-4040-b24c-1a82d6c676f1\" />\n\n## Init\n<img width=\"1701\" height=\"1115\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f8d2e69b-9988-4e22-bc81-480499216bac\" />\n\n## specify check\n<img width=\"1061\" height=\"588\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/58db009d-5e41-4115-b21b-1f1aa4789c47\" />\n\n## /speckit.constitution\n<img width=\"2097\" height=\"669\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/43d5cc46-99a1-413a-8de1-4cf787f6dfdf\" />\n\n## /speckit.specify\n<img width=\"562\" height=\"652\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bcf8669f-d5e1-4005-a85a-d7ed361d0a01\" />",
      "state": "open",
      "created_at": "2025-10-12 16:44:47",
      "updated_at": "2025-10-12 16:44:47",
      "closed_at": null,
      "author": {
        "id": 80827300,
        "username": "lewiesnyder",
        "display_name": "lewiesnyder",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3507458775,
      "number": 851,
      "title": "AMP Code Integration",
      "body": "Create an [AMP](https://ampcode.com/) code integration so spec kit can also be used with the [AMP](https://ampcode.com/) cli.",
      "state": "open",
      "created_at": "2025-10-12 16:18:44",
      "updated_at": "2025-10-12 16:18:44",
      "closed_at": null,
      "author": {
        "id": 34139475,
        "username": "abdurmasood",
        "display_name": "abdurmasood",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3507423305,
      "number": 850,
      "title": "Workflows should adapt for incremental editing of spec/plan/task files (when plan/spec files already exist).",
      "body": "Hello. So the unexpected behavior is this:\nIf you ask a LLM to edit a `plan.md` with a prompt like attached below, it starts editing it free-style, however it wants. Even after adding \"adhere to plan-template.md` it still introduces many unwanted changes. \n\nIt's quite obvious that when `plan.md` already exists there is no need to rerun plan init scripts, however guidelines on how to edit plans should be provided instead.\n\nIn my case, the plan and tasks are already quite long; it took 1 day to edit it properly.\n\n\n<details><summary>Prompt</summary>\n<p>\n\n/speckit.plan I've just added Functional Requirements FR-023 to FR-027@spec.md#L89-93 , acceptance criteria: @spec.md#L119-123 , and success criteria SC-011 to SC-013\n@spec.md#L165-168.\n\nUpdate the plan to follow these requirements @plan.md. Keep structure to @plan-template.md .\n\nAlso, after, edit @plan.md#L105-131 - instead of ...; if something belongs to devops put it into folder_123/devops/ folder, e.g. 123_456/123_456.py. Add 123_456/enums/ too, for only enums. I don't think runtime_checks.py is necessary since it is superseded by @123_utils.py as in@plan.md#L140, and producers.py is @base_456.py. @base_456.py  should stay where it is. \n\nDO NOT make major edits. Just add in what new edits are required.\n\n</p>\n</details> \nThe result still is worse than if I rewrite it completely. But I am losing so much detail if I do!",
      "state": "open",
      "created_at": "2025-10-12 15:57:28",
      "updated_at": "2025-10-12 15:58:23",
      "closed_at": null,
      "author": {
        "id": 108194191,
        "username": "MRiabov",
        "display_name": "MRiabov",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3507068930,
      "number": 848,
      "title": "Add a \"restore context\" workflow.",
      "body": "Hello.\nI've created a long project init spec. Now, because the context gets so long, I want to have another conversation to continue editing it. \nIt would be useful to have a /read-context which would read spec, plan, research, and everything, such that we don't have to write the boilerplate like:\n```text\nTake a look at the @spec.md for what we are doing here, and @plan.md for the plan to implement it. There are also other files in @001-task-create-a folder.\n```\nWhich probably isn't effective either.\n\nIt should describe what .md document is responsible for what, and load the certain rules with what meant to be understood by the model, in which order (constitution -> spec -> plan) and how.",
      "state": "open",
      "created_at": "2025-10-12 12:12:03",
      "updated_at": "2025-10-12 12:12:56",
      "closed_at": null,
      "author": {
        "id": 108194191,
        "username": "MRiabov",
        "display_name": "MRiabov",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506753676,
      "number": 847,
      "title": "\"End of task guardrails\" are routinely skipped as context fills up",
      "body": "No matter how many times I try to adjust the constitution/spec/plan/tasks, I *cannot* get Spec Kit to reliably ensure all tests are passing when it finishes a task. Much of this appears to be the context rot and the LLM \"forgetting\" about end-of-task guardrails.  I've [filed an issue with vscode copilot chat to help with this](https://github.com/microsoft/vscode/issues/270528), but the core problem is that the Spec Kit workflow doesn't offer a clear way to deal with this.\n\nI can type \"fix the following broken tests, ensuring that you're respecting the constitution/spec/plan/tasks. Ensure that you're understanding if it's the code that is broken or the tests that are broken and fix appropriately. At the end of this, YOU MUST RERUN THE ENTIRE TEST SUITE, fixing any new broken tests.\"\n\nBut that's a pain, so I added a `/fixtests` command that I can easily run in a new session. However, there are other guardrails, this won't fix, such as \"halt after each chunk of work and let the user commit.\" It works at first, but as context rot sets in, it doesn't and Spec Kit happily commits the changes for me.\n\nI don't have a clear solution for this, but \"end of task\" guardrails that must never be skipped are routinely skipped. It would be nice if there was some way of addressing this. I keep trying to make tasks as small as possible, but some problems, even when broken into small chunks, turn out to be hard problems.",
      "state": "open",
      "created_at": "2025-10-12 07:00:36",
      "updated_at": "2025-10-16 05:33:26",
      "closed_at": null,
      "author": {
        "id": 24634,
        "username": "Ovid",
        "display_name": "Ovid",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3404918005,
          "body": "Unfortunately this is very much given in working with LLMs. Everything spec-kit would do, would add even more to the context. \n\nMost of us use deterministic solutions to this problem, mostly called \"harness\". You can do it with claude code hooks (running tests before every attempt to commit stuff to git) or small frameworks like pocketFlow (defining a series of steps that will be run, no matter what the LLMs \"decide\").",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 07:15:22",
          "updated_at": "2025-10-15 07:15:22",
          "issue_id": 847
        },
        {
          "id": 3406905444,
          "body": "I use claude code and In my experience assigning subagents to handle a set of tasks an help address the issue of context build up. Here is a [detailed writeup](https://www.linkedin.com/pulse/spec-driven-development-beyond-first-feature-api-design-krishnan--lbyec) I had put together on this. Maybe in your case you can move the details in your `/fixtests` command to a Subagent and in the Constitution you can say any test failures have to be handled specifically by that subagent. Hope this helps.",
          "author": {
            "id": 126087,
            "username": "harikrishnan83",
            "display_name": "harikrishnan83",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 15:02:23",
          "updated_at": "2025-10-15 15:03:54",
          "issue_id": 847
        },
        {
          "id": 3409241231,
          "body": "I like the idea of sub-agents, but their observebility is really crappy. If your sub-agent \"fixes\" something, it will only return a summary of the result to the main agent and then all context will be lost. You can not iterate on that. Most of the time, you will not know what your sub-agent actually did. \n\nMost people I know use sub-agents only for summarized context retrieval. Like \"go through this 80 kb of log file and give me a short explanation of patterns you see\". So the logfile will not end up in your context.",
          "author": {
            "id": 375863,
            "username": "foertel",
            "display_name": "foertel",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 05:33:25",
          "updated_at": "2025-10-16 05:33:25",
          "issue_id": 847
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506634435,
      "number": 846,
      "title": "Breaking down task like how Project managers think is bad idea.",
      "body": "The previous structure of how task.md was created was perfect.\nBreaking down task like how Project managers think is bad idea.\n",
      "state": "closed",
      "created_at": "2025-10-12 03:48:17",
      "updated_at": "2025-10-13 18:24:41",
      "closed_at": "2025-10-13 18:24:40",
      "author": {
        "id": 58826678,
        "username": "APJoshi-Projects",
        "display_name": "APJoshi-Projects",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 3,
      "comments": [
        {
          "id": 3393986870,
          "body": "@APJoshi-Projects You've stated an opinion. It's hard to evaluate. Can you explain in a way that everyone can understand:\n\n* Why \"Breaking down task like how Project managers think is bad idea.\"\n* Why the previous task structure was better",
          "author": {
            "id": 24634,
            "username": "Ovid",
            "display_name": "Ovid",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 06:36:41",
          "updated_at": "2025-10-12 06:36:41",
          "issue_id": 846
        },
        {
          "id": 3394047406,
          "body": " For Why \"Breaking down task like how Project managers think is bad idea.\"  \n& For Why the previous task structure was better\n@Ovid- is  when breaking down tasks it seems the implementation stage is not working as good as it was working earlier, it seems to be loosing context (project with 4-6 features) when tasks are broken down, previously it was coding keeping everything in context. it gets confusing. the previous task structure was better, it worked well in implementation stage, observability was good. in new the observaability was not that great during implementation. (spec-kit worked well before userstories and checklist) ( keep spek-kit as spec driven, no need to solve the problem when one can not provide specs)",
          "author": {
            "id": 58826678,
            "username": "APJoshi-Projects",
            "display_name": "APJoshi-Projects",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 07:54:16",
          "updated_at": "2025-10-12 09:34:10",
          "issue_id": 846
        },
        {
          "id": 3398607047,
          "body": "I think you all are experts that made this wonderful app, you must have thought out carefully enough. Thanks.",
          "author": {
            "id": 58826678,
            "username": "APJoshi-Projects",
            "display_name": "APJoshi-Projects",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 18:24:40",
          "updated_at": "2025-10-13 18:24:40",
          "issue_id": 846
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506574562,
      "number": 845,
      "title": "Aider (cli)",
      "body": "Please add Aider to the list (AI-powered coding assistant, same gemini cli), repository URL: https://github.com/paul-gauthier/aider.  \nI think this will be a powerful boost for both projects.",
      "state": "open",
      "created_at": "2025-10-12 02:22:05",
      "updated_at": "2025-10-13 01:08:26",
      "closed_at": null,
      "author": {
        "id": 99143075,
        "username": "Ajaxiis",
        "display_name": "Ajaxiis",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3395574052,
          "body": "Dupe of #396 \nIt would be great though.",
          "author": {
            "id": 392930,
            "username": "Janzert",
            "display_name": "Janzert",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 01:08:26",
          "updated_at": "2025-10-13 01:08:26",
          "issue_id": 845
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506353667,
      "number": 844,
      "title": "README want more meat. I guess.",
      "body": "Hey! I've checked out your README and videos. A couple of things weren't clear:\n- [ ] You mention a specification, but where is it? A link would be great.\n- [ ] You say the project simplifies development, but how? I didn't get a sense of what it actually makes easier.\n\nCould you provide more details on both points? Thanks!",
      "state": "open",
      "created_at": "2025-10-11 21:12:34",
      "updated_at": "2025-10-14 15:55:03",
      "closed_at": null,
      "author": {
        "id": 1460479,
        "username": "cybermerlin",
        "display_name": "cybermerlin",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 5,
      "comments": [
        {
          "id": 3394273153,
          "body": "Watch the youtube video.",
          "author": {
            "id": 108194191,
            "username": "MRiabov",
            "display_name": "MRiabov",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 12:08:47",
          "updated_at": "2025-10-12 12:08:47",
          "issue_id": 844
        },
        {
          "id": 3395314059,
          "body": "> Watch the youtube video.\n\nthank you.\nI\u2019ve watched the video three times now (The author utters a lot of words, which sounds like an endless stream of words), but I still don\u2019t see the value. The video explains how to describe a task and get code generated from that description. However, I get the same results using IntelliJ IDEA, VS Code, or even Gemini Chat.\n\nI already have a script for starting new projects\u2014my script sets everything up in exactly three minutes, with no waiting for any pseudo-AI systems.\n\n",
          "author": {
            "id": 1460479,
            "username": "cybermerlin",
            "display_name": "cybermerlin",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 20:11:50",
          "updated_at": "2025-10-12 20:11:50",
          "issue_id": 844
        },
        {
          "id": 3395409375,
          "body": "@MRiabov  Let me show you how hard it is to listen to him:\n\n> So\u00a0I\u00a0do\u00a0recommend using\u00a0it. I\u00a0just copied the command and I'm\u00a0just gonna go\u00a0to\u00a0the terminal, zoom it\u00a0in, and we're\u00a0gonna paste it\u00a0here. And I'm\u00a0gonna bootstrap a\u00a0new project. Let's\u00a0see, what is\u00a0a\u00a0thing that we\u00a0want to\u00a0build today? And let's\u00a0say I\u00a0wanna build a\u00a0podcast website. I\u00a0am\u00a0big on\u00a0podcasting. If\u00a0you have not listened to\u00a0the work item, check it\u00a0out. But let's\u00a0say I\u00a0do\u00a0not have a\u00a0podcast website and I\u00a0want to\u00a0build one for myself. So\u00a0naturally what I\u00a0want to\u00a0do\u00a0is\u00a0just bootstrap the Spectrum ML\u00a0process for the website.\n\n<img width=\"936\" height=\"1042\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ebb89ea7-0020-4957-87b0-3ccd54293c07\" />\n7 A4 pages X,x\n\n\nbut it have not any answers on my 2 questions",
          "author": {
            "id": 1460479,
            "username": "cybermerlin",
            "display_name": "cybermerlin",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 22:08:55",
          "updated_at": "2025-10-12 22:08:55",
          "issue_id": 844
        },
        {
          "id": 3398019157,
          "body": "> You say the project simplifies development, but how?\n\nI've generated 2k lines of production ready python code which was previously very difficult to move due to problems with aligning the model. Similar to his results\n\n>You mention a specification, but where is it?\n\nDid you read the README? do the slash commands in order.\n",
          "author": {
            "id": 108194191,
            "username": "MRiabov",
            "display_name": "MRiabov",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 15:34:47",
          "updated_at": "2025-10-13 15:35:05",
          "issue_id": 844
        },
        {
          "id": 3402547601,
          "body": "@cybermerlin AI Coding can be a bit frustrating and sometimes hard to wrap our heads around, I get it. Take some time to really read through the README if the video isn't doing it for ya. Maybe you're more of a read to learn kind of individual and that's great! The README explains every step in order and even has a section explaining the benefits of Spec-Kit.",
          "author": {
            "id": 1202831,
            "username": "brimdor",
            "display_name": "brimdor",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-14 15:55:03",
          "updated_at": "2025-10-14 15:55:03",
          "issue_id": 844
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506244839,
      "number": 842,
      "title": "Copilot/Spec-kit seem unable to write PowerShell scripts that work.",
      "body": "Config: Copilot in vscode running GPT-5 Lite.  It seems more reliable to write Python.  \n\nI'm using the PowerShell version of the copilot scripts updated yesterday.   It gets involved in loops trying to correct PowerShell errors, frequently due to improper use of commas, when I give it a prompt as simple as commit.  The darn thing keeps trying to use PowerShell for tasks it's not suited for.   I finally restricted its access to the terminal tool and told it to use the other tools available to it.   \n\nI have tried to address this by tuning the constitution and copilot_instructions.md.   \n\n<!-- Failed to upload \"constitution.md\" -->\n\n<!-- Failed to upload \"constitution.md\" -->",
      "state": "open",
      "created_at": "2025-10-11 19:01:17",
      "updated_at": "2025-10-11 19:18:47",
      "closed_at": null,
      "author": {
        "id": 2715647,
        "username": "BurtHarris",
        "display_name": "BurtHarris",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3393601220,
          "body": "Why can't I attach the markdown documents?  \n> Failed to upload \"constitution.md\"<\n\nP.S. I'm a retired Microsoft Dev, shipped Microsoft English Query back in SQL 2000.    The NLP was implemented in a compiled Lisp-like language, and hand-tuned linguistic knowledge coded in Lisp, aided by a semantic model that combined a database and language applicable to the customer's domain.  \n\nMEQ knew when it didn't know how to answer a question.   My contribution was a tool that uses a set of Lisp-generated 'options' on how to interpret unrecognized terms, and maps them into the database without requiring an expert; someone who knew the DB schema could generally help it out.   The classic question back then, from testers, was 'Who bought chai' against the Northwind Traders database.  A DBA walked through a set of questions and, for example, mapped 'Who' to the customer's table, 'What' to the transaction table, and 'Chai' to an instance out of the products table.   This extended the semantic model, enabling Lisp to answer similar questions moving forward. ",
          "author": {
            "id": 2715647,
            "username": "BurtHarris",
            "display_name": "BurtHarris",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 19:15:05",
          "updated_at": "2025-10-11 19:15:05",
          "issue_id": 842
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506227305,
      "number": 841,
      "title": "Feature Request: Support disabling automatic branch creation via parameter",
      "body": "Current Spec Kit workflow automatically creates a new git branch for each feature (e.g., 'git checkout -b ...'). However, some users prefer to manage specs/features directly on the main branch or a specific branch without creating branches every time, to avoid branch proliferation and keep the workflow simple.\n\n**Problem:**\nWhen customizing scripts to disable branch creation, updates/upgrades to CLI overwrite personal modifications, making maintenance inconvenient. If the CLI supported a '--no-branch' or '--branch=false' parameter, users could easily choose branch creation behavior, and upgrades would not affect their personalized workflow.\n\n**Expected behavior:**\n- Feature/spec creation commands should support a '--no-branch' or similar parameter to prevent branch creation.\n- Allow specs subdirectories and feature files to be generated and managed only in the current branch or workspace.\n\n**Implementation suggestion:**\n- Add an optional parameter in the script/CLI to control branch creation behavior flexibly.\n- Supplement documentation to explain this usage.\n\nThanks!",
      "state": "open",
      "created_at": "2025-10-11 18:39:43",
      "updated_at": "2025-10-20 05:52:23",
      "closed_at": null,
      "author": {
        "id": 70484377,
        "username": "WeiMeng101",
        "display_name": "WeiMeng101",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3420647041,
          "body": "We needed to disable automatic feature branch creation because our workflow uses  [Git Town](https://github.com/git-town/git-town) as a higher-level wrapper around Git, and our branch names often include task IDs from our task manager. While this control ideally belongs in spec-kit, here\u2019s the workaround we implemented to achieve the desired behavior.\n\n<details open>\n  <summary>Click to expand</summary>\n\n### Step-by-Step Implementation Guide\n\n#### 1. Add the `NO_BRANCH` Variable \n**Location:** Around line 6, after the existing variable declarations\n\n``` diff --git\n// create-new-feature.sh\n\nJSON_MODE=false\nSHORT_NAME=\"\"\n+ NO_BRANCH=false\nARGS=()\ni=1\n```\n\n---\n\n#### 2. Add Flag Parsing Logic  \n**Location:** In the argument parsing loop, around line 28, add a new case **before** the `--help|-h` case:\n\n```\n// create-new-feature.sh\n\n--no-branch)\n    NO_BRANCH=true\n    ;;\n```\n\n---\n\n#### 3. Update Help Text  \n**Location:** Around lines 30\u201340, in the help message section\n\n**Update the usage line:**\n```\n// create-new-feature.sh\n\necho \"Usage: $0 [--json] [--short-name <name>] [--no-branch] <feature_description>\"\n```\n\n**Add the new option description:**\n```\n// create-new-feature.sh\n\necho \"  --no-branch         Skip Git branch creation\"\n```\n\n**Update the examples section:**\n```\n// create-new-feature.sh\n\necho \"Examples:\"\necho \"  $0 'Add user authentication system' --short-name 'user-auth'\"\necho \"  $0 'Implement OAuth2 integration for API' --no-branch\"\necho \"  $0 'Add new feature' --json --no-branch --short-name 'new-feature'\"\n```\n\n---\n\n#### 4. Modify Branch Creation Logic  \n**Location:** Replace lines 183\u2013187 (the current Git branch creation block)\n\n**Replace this:**\n```\n// create-new-feature.sh\n\nif [ \"$HAS_GIT\" = true ]; then\n    git checkout -b \"$BRANCH_NAME\"\nelse\n    >&2 echo \"[specify] Warning: Git repository not detected; skipped branch creation for $BRANCH_NAME\"\nfi\n```\n\n**With this:**\n```\n// create-new-feature.sh\n\nif [ \"$NO_BRANCH\" = true ]; then\n    >&2 echo \"[specify] Info: Skipping branch creation for $BRANCH_NAME (--no-branch flag used)\"\nelif [ \"$HAS_GIT\" = true ]; then\n    git checkout -b \"$BRANCH_NAME\"\nelse\n    >&2 echo \"[specify] Warning: Git repository not detected; skipped branch creation for $BRANCH_NAME\"\nfi\n```\n\n---\n\n### Summary of Changes\n\nThe modified script will:\n\n- Accept the new flag: `--no-branch` can be used alongside existing flags  \n- Skip branch creation: When `--no-branch` is used, no Git branch will be created  \n- Maintain all other functionality: directory creation, template copying, numbering, etc. remain unchanged  \n- Provide clear feedback: users will see a message indicating branch creation was skipped  \n- Preserve backward compatibility: existing usage without the flag works exactly as before  \n\n---\n\n### Usage Examples After Implementation\n\n**Skip branch creation**\n```\n./create-new-feature.sh --no-branch \"Add user authentication\"\n```\n\n**Skip branch creation with custom name and JSON output**\n```\n./create-new-feature.sh --json --no-branch --short-name \"user-auth\" \"Add user authentication system\"\n```\n\n**Traditional usage (creates branch) \u2013 unchanged**\n```\n./create-new-feature.sh \"Add user authentication system\"\n```\n\n---\n\n### Integration with the spec-kit command\n\nAfter implementing these changes, update the `/speckit.specify` command.\n\n```diff --git speckit.specify.md\n\n- 2. Run the script `.specify/scripts/bash/create-new-feature.sh --json \"$ARGUMENTS\"`\n+ 2. Run the script `.specify/scripts/bash/create-new-feature.sh --json --no-branch \"$ARGUMENTS\"`\n...\n- 7. Report completion with branch name, spec file path, checklist results, and readiness for the next phase (`/speckit.clarify` or `/speckit.plan`).\n\n- **NOTE:** The script creates and checks out the new branch and initializes the spec file before writing.\n+7. Report completion with branch name, spec file path, checklist results, and readiness for the next phase (`/speckit.clarify` or `/speckit.plan`).\n\n+**NOTE:** The script creates and checks out the new branch and initializes the spec file before writing (unless `--no-branch` is used).\n```\n\n---\n\nThis implementation adds flexibility to control branch creation behavior while preserving all other functionality of the script.\n\n#### 5. Additionally, you can comment out the checking feature branch for `check-prerequisites.sh` and `setup-plan.sh`\n\n```\n// check-prerequisites.sh\n\n# NOTE: Branch validation commented out to support flexible workflow (--no-branch support)\n# check_feature_branch \"$CURRENT_BRANCH\" \"$HAS_GIT\" || exit 1\n```\n\n```\n// setup-plan.sh\n\n# NOTE: Branch validation commented out to support flexible workflow (--no-branch support)\n# check_feature_branch \"$CURRENT_BRANCH\" \"$HAS_GIT\" || exit 1\n```\n</details>",
          "author": {
            "id": 39343312,
            "username": "mrmarufpro",
            "display_name": "mrmarufpro",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 05:42:09",
          "updated_at": "2025-10-20 05:52:23",
          "issue_id": 841
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3506025198,
      "number": 840,
      "title": "CHANGELOG.md and Release Notes",
      "body": "In [CHANGELOG.md](https://github.com/github/spec-kit/blob/main/CHANGELOG.md), the latest version is `[0.0.20] - 2025-10-14`. In [Release](https://github.com/github/spec-kit/releases) page, the latest version is `Spec Kit Templates - 0.0.69`. It's a little bit confusing. Can anyone explain?",
      "state": "open",
      "created_at": "2025-10-11 15:49:29",
      "updated_at": "2025-10-21 22:52:46",
      "closed_at": null,
      "author": {
        "id": 88981,
        "username": "doggy8088",
        "display_name": "doggy8088",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3429846257,
          "body": "I think the templates and scripts used by the commands are actually part of the Releases. The versions in the changelog, on the other hand, is specific to the CLI and isn\u2019t part of the release. Just a heads up, I\u2019m not entirely sure about this. I agree that it can be a bit confusing, and the notes in the releases are definitely not very helpful.",
          "author": {
            "id": 355877,
            "username": "gugahoi",
            "display_name": "gugahoi",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-21 22:52:46",
          "updated_at": "2025-10-21 22:52:46",
          "issue_id": 840
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3505422473,
      "number": 835,
      "title": "Feature Request: Session-based context management for implementation phases",
      "body": "  ## Problem\n\n  When implementing longer, complex projects using spec-kit, the LLM context window becomes saturated with implementation details from previous tasks. This causes the AI assistant to:\n\n  - Lose sight of the original high-level architecture and specifications\n  - Forget established patterns and conventions defined in the constitution\n  - Make decisions inconsistent with the overall project vision\n  - Require frequent manual re-grounding in project specifications\n\n  For projects with multiple specs and features, this context pollution significantly degrades implementation quality as work progresses.\n\n  ## Proposed Solution\n\n  Implement a phase-based or task-based execution model where each implementation task/spec can be started in a fresh context that includes:\n\n  1. **High-level project context** (automatically injected):\n     - Constitution and ways of working\n     - Overall system architecture\n     - Cross-cutting concerns and patterns\n\n  2. **Task-specific context** (scoped to current work):\n     - The specific spec being implemented\n     - Related dependencies and interfaces\n     - Relevant test requirements\n\n  3. **Context isolation**:\n     - Previous implementation details are excluded unless explicitly relevant\n     - Each task starts fresh but with proper grounding\n\n  ## Example Implementation Approach\n\n  Similar to how other tools handle this (e.g., [Kiro](https://www.kiro.so/)), this could work as:\n  - User runs `/speckit:implement <spec-name>` or clicks a \"start implementation\" action\n  - System creates a fresh session/context\n  - Automatically loads constitution, architecture docs, and the target spec\n  - AI implements with focus on just that task while maintaining consistency with project vision\n\n  ## Benefits\n\n  - **Scalability**: Supports longer, more complex projects without context degradation\n  - **Consistency**: Each task maintains alignment with constitution and architecture\n  - **Efficiency**: Reduces need for manual context management and re-grounding\n  - **Quality**: AI stays focused on both micro (current task) and macro (overall vision) perspectives\n\n  ## Current Workaround\n\n  Manually creating new sessions and copy-pasting relevant context files, but this is error-prone and time-consuming.\n\n  ## Additional Context\n\n  This becomes particularly important when working through multiple specs generated by `/speckit:plan`, where maintaining consistency across implementations is critical.",
      "state": "open",
      "created_at": "2025-10-11 08:20:53",
      "updated_at": "2025-10-19 19:27:17",
      "closed_at": null,
      "author": {
        "id": 26845866,
        "username": "iolalog",
        "display_name": "iolalog",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3419898128,
          "body": "  ## Related Issues\n\n  After further research, I found several other issues that relate to context management challenges:\n\n  - #954 - Agent loses focus on spec context during edits\n  - #955 - Context issues with big codebases\n  - #848 - Need for context restoration workflow\n  - #847 - Context saturation causes guardrails to be skipped\n  - #876 - Inconsistency between spec rounds due to context loss\n  - #813 - Context reload challenges with limited context windows\n  - #803 - Questions about context isolation strategy between specs\n\n  These issues share a common root cause: **context window saturation during long implementations**. This feature request proposes a systematic solution through session-based context management with automatic injection of high-level project context.\n\n  The prevalence of these related issues suggests this is a significant pain point for users working on longer, more complex projects with spec-kit.\n\n  ---\n\n  _Note: Claude Code helped me better formulate this issue and create this overview of related issues._",
          "author": {
            "id": 26845866,
            "username": "iolalog",
            "display_name": "iolalog",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 19:27:17",
          "updated_at": "2025-10-19 19:27:17",
          "issue_id": 835
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3504986395,
      "number": 833,
      "title": "The LLM Doesn\u2019t follow the usual workflow",
      "body": null,
      "state": "open",
      "created_at": "2025-10-11 02:02:04",
      "updated_at": "2025-10-11 02:02:04",
      "closed_at": null,
      "author": {
        "id": 111205793,
        "username": "Muhabu",
        "display_name": "Muhabu",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3504908095,
      "number": 832,
      "title": "Claude Code Plugin Version",
      "body": "Claude Code and I made this plugin for Claude Code directly from spec-kit....but haven't fully tested every part of it yet. Let me know how it works for you. \nhttps://github.com/MartyBonacci/specswarm\n\nIt took some modification since plugins don't include scripts.\n\n**To install the plugin in Claude Code...**\n\n/plugin marketplace add MartyBonacci/specswarm \n\n/plugin install speckit",
      "state": "open",
      "created_at": "2025-10-11 00:50:16",
      "updated_at": "2025-10-20 01:08:03",
      "closed_at": null,
      "author": {
        "id": 29366334,
        "username": "MartyBonacci",
        "display_name": "MartyBonacci",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 10,
      "comments": [
        {
          "id": 3393350085,
          "body": "@MartyBonacci https://github.com/amondnet/claude-plugins/tree/main/plugins/spec-kit\nI have set up the script to install via a hook. \n",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 13:53:33",
          "updated_at": "2025-10-11 14:38:47",
          "issue_id": 832
        },
        {
          "id": 3393435462,
          "body": "@amondnet\nSo the hook installs the script? \nWhat exactly does the hook do?",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 15:41:52",
          "updated_at": "2025-10-11 15:41:52",
          "issue_id": 832
        },
        {
          "id": 3393444890,
          "body": "@MartyBonacci \n\nhttps://github.com/amondnet/claude-plugins/blob/ad86423bad9bb28aad3909ccb38e5a1e462fbb7f/plugins/spec-kit/.claude-plugin/plugin.json#L12-L21\n\n\n1. The hook is executed before the Bash tool is invoked.\n2. If `Bash($PROJECT_ROOT/.specify/scripts/*)` is invoked and there is no `.specify` in the project root, copy `.specify`. https://github.com/amondnet/claude-plugins/blob/main/plugins/spec-kit/scripts/validate.sh\n",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 15:54:40",
          "updated_at": "2025-10-11 15:54:40",
          "issue_id": 832
        },
        {
          "id": 3407018010,
          "body": "Do I understand this correctly that Spec Kit has a more complex setup than what is currently possible with a Claude Code plugin?",
          "author": {
            "id": 144173,
            "username": "funkenstrahlen",
            "display_name": "funkenstrahlen",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 15:25:39",
          "updated_at": "2025-10-15 15:25:39",
          "issue_id": 832
        },
        {
          "id": 3407114139,
          "body": "@funkenstrahlen That is correct. Claude Code has a smooth plugin installation command (/plugin) that makes adding functionality easy.",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 15:45:23",
          "updated_at": "2025-10-15 15:45:23",
          "issue_id": 832
        },
        {
          "id": 3407224887,
          "body": "I am migrating Gemini extensions to Claude Code plugins, including Spec-kit.\n\nhttps://plugins.pleaseai.dev/?install=spec-kit\n",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 16:05:46",
          "updated_at": "2025-10-15 16:05:46",
          "issue_id": 832
        },
        {
          "id": 3413700213,
          "body": "Any official plug-in released from spec-kit yet??",
          "author": {
            "id": 9297622,
            "username": "grhaonan",
            "display_name": "grhaonan",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 03:37:41",
          "updated_at": "2025-10-17 03:37:41",
          "issue_id": 832
        },
        {
          "id": 3413774189,
          "body": "@grhaonan it was progressing so slow that I just made my own Claude Code plugin based on spec-kit https://github.com/MartyBonacci/specswarm ",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 04:07:02",
          "updated_at": "2025-10-17 04:07:02",
          "issue_id": 832
        },
        {
          "id": 3419758445,
          "body": "Using agent skills seems like the best approach.\n\nSkills can include references (templates), scripts, and more.\n\nplugin\n- commands\n- skills: template, script\n\nhttps://www.notion.so/notiondevs/Notion-Skills-for-Claude-28da4445d27180c7af1df7d8615723d0\n\n> ### Spec to Implementation \ud83d\ude80\n> \n> Turns product or tech specs into concrete Notion tasks that Claude Code can implement. Breaks down spec pages into detailed implementation plans with clear tasks, acceptance criteria, and progress tracking to guide development from requirements to completion.\n\n[notion-spec-to-implementation.zip](https://github.com/user-attachments/files/22991048/notion-spec-to-implementation.zip)",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 15:43:44",
          "updated_at": "2025-10-19 15:46:53",
          "issue_id": 832
        },
        {
          "id": 3420173477,
          "body": "I'm going to refactor https://github.com/MartyBonacci/specswarm to use skills.",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 01:08:03",
          "updated_at": "2025-10-20 01:08:03",
          "issue_id": 832
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3504898213,
      "number": 830,
      "title": "Unable to init with cursor-agent",
      "body": "Getting the following when attempting to init from scratch with cursor.\n```\nSelected AI assistant: cursor-agent\nSelected script type: sh\nNo matching release asset found for cursor-agent (expected pattern: spec-kit-template-cursor-agent-sh)\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Available Assets \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 spec-kit-template-auggie-ps-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-auggie-sh-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-claude-ps-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-claude-sh-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-codebuddy-ps-v0.0.61.zip                 \u2502\n\u2502 spec-kit-template-codebuddy-sh-v0.0.61.zip                 \u2502\n\u2502 spec-kit-template-codex-ps-v0.0.61.zip                     \u2502\n\u2502 spec-kit-template-codex-sh-v0.0.61.zip                     \u2502\n\u2502 spec-kit-template-copilot-ps-v0.0.61.zip                   \u2502\n\u2502 spec-kit-template-copilot-sh-v0.0.61.zip                   \u2502\n\u2502 spec-kit-template-cursor-ps-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-cursor-sh-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-gemini-ps-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-gemini-sh-v0.0.61.zip                    \u2502\n\u2502 spec-kit-template-kilocode-ps-v0.0.61.zip                  \u2502\n\u2502 spec-kit-template-kilocode-sh-v0.0.61.zip                  \u2502\n\u2502 spec-kit-template-opencode-ps-v0.0.61.zip                  \u2502\n\u2502 spec-kit-template-opencode-sh-v0.0.61.zip                  \u2502\n\u2502 spec-kit-template-q-ps-v0.0.61.zip                         \u2502\n\u2502 spec-kit-template-q-sh-v0.0.61.zip                         \u2502\n\u2502 spec-kit-template-qwen-ps-v0.0.61.zip                      \u2502\n\u2502 spec-kit-template-qwen-sh-v0.0.61.zip                      \u2502\n\u2502 spec-kit-template-roo-ps-v0.0.61.zip                       \u2502\n\u2502 spec-kit-template-roo-sh-v0.0.61.zip                       \u2502\n\u2502 spec-kit-template-windsurf-ps-v0.0.61.zip                  \u2502\n\u2502 spec-kit-template-windsurf-sh-v0.0.61.zip                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Failure \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Initialization failed: 1                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n```",
      "state": "closed",
      "created_at": "2025-10-11 00:44:13",
      "updated_at": "2025-10-11 16:06:41",
      "closed_at": "2025-10-11 16:06:41",
      "author": {
        "id": 1108071,
        "username": "krisfremen",
        "display_name": "krisfremen",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 6,
      "comments": [
        {
          "id": 3393003531,
          "body": "Facing the same issue when running command `specify init <project> --ai cursor-agent` \nSelected AI assistant: cursor-agent\nSelected script type: sh",
          "author": {
            "id": 43429739,
            "username": "Divya1173",
            "display_name": "Divya1173",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 07:03:11",
          "updated_at": "2025-10-11 07:03:11",
          "issue_id": 830
        },
        {
          "id": 3393026234,
          "body": "Same Problem here... ",
          "author": {
            "id": 685613,
            "username": "herculosh",
            "display_name": "herculosh",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 07:37:49",
          "updated_at": "2025-10-11 07:37:49",
          "issue_id": 830
        },
        {
          "id": 3393036363,
          "body": "Same problem here. specify check shows that cursor is available, but impossible to init with cursor",
          "author": {
            "id": 64369457,
            "username": "ViktorLi1988",
            "display_name": "ViktorLi1988",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 07:52:36",
          "updated_at": "2025-10-11 07:52:36",
          "issue_id": 830
        },
        {
          "id": 3393041542,
          "body": "same problem, seems expected pattern may be  spec-kit-template-cursor-sh-v0.0.61.zip instead of spec-kit-template-cursor-agent-sh",
          "author": {
            "id": 194209657,
            "username": "jettchen0430",
            "display_name": "jettchen0430",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 07:59:21",
          "updated_at": "2025-10-11 07:59:21",
          "issue_id": 830
        },
        {
          "id": 3393065450,
          "body": "Same Problem here...\nI tried to reinstall back to version 0.0.57 and it worked fine.",
          "author": {
            "id": 15082628,
            "username": "anli001024",
            "display_name": "anli001024",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 08:33:43",
          "updated_at": "2025-10-11 08:41:07",
          "issue_id": 830
        },
        {
          "id": 3393454752,
          "body": "Should be working now thanks to @ben-edgar and his recent fix. Appreciate the report!",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 16:06:40",
          "updated_at": "2025-10-11 16:06:40",
          "issue_id": 830
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3504442359,
      "number": 829,
      "title": "Spec-kit commits are not respecting ~/.gitmessage",
      "body": "Our team has a style for commit messages that they start with `[ <initials> ] [ <jira ticket number> ] <message>` and I have this in my ~/.gitmessage file\n\nHowever when using spec-kit copilot keeps making commit messages with its style e.g. (chore (migration)...) and ignoring my file\n\nIs there a way to customize it to use our prefix?",
      "state": "open",
      "created_at": "2025-10-10 20:36:10",
      "updated_at": "2025-10-13 15:17:38",
      "closed_at": null,
      "author": {
        "id": 15198846,
        "username": "bradbalfour",
        "display_name": "bradbalfour",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3503206030,
      "number": 822,
      "title": "add support for droid CLI",
      "body": "https://factory.ai/product/cli",
      "state": "open",
      "created_at": "2025-10-10 14:32:57",
      "updated_at": "2025-10-15 05:02:38",
      "closed_at": null,
      "author": {
        "id": 48731762,
        "username": "QualixSoftware",
        "display_name": "QualixSoftware",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [
        {
          "id": 9221826267,
          "name": "enhancement",
          "color": "aaaaaa",
          "description": null
        },
        {
          "id": 9316682610,
          "name": "new-agent",
          "color": "33F174",
          "description": ""
        }
      ],
      "comment_count": 4,
      "comments": [
        {
          "id": 3392029921,
          "body": "I see that it seems to support custom slash commands: https://docs.factory.ai/cli/configuration/custom-commands\n\nSeems easy enough to add.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:31:29",
          "updated_at": "2025-10-10 19:31:29",
          "issue_id": 822
        },
        {
          "id": 3393806834,
          "body": "Droid is really nice. If I use codex to get started, renaming the prompt folder path to .factory/commands seems to work. Do there is anything else to change or I'm good to go?",
          "author": {
            "id": 5209294,
            "username": "hmorneau",
            "display_name": "hmorneau",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 01:26:49",
          "updated_at": "2025-10-12 01:27:48",
          "issue_id": 822
        },
        {
          "id": 3394734193,
          "body": "I can't wait to see droid support!",
          "author": {
            "id": 25500396,
            "username": "Reynard-HanSkin",
            "display_name": "Reynard-HanSkin",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-12 15:48:49",
          "updated_at": "2025-10-12 15:48:49",
          "issue_id": 822
        },
        {
          "id": 3404531659,
          "body": "Just noticed PR #650 (Droid CLI support) was labeled a 'merge-candidate' two weeks ago. Can't wait for the merge! ",
          "author": {
            "id": 61741059,
            "username": "kenryu42",
            "display_name": "kenryu42",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 05:02:38",
          "updated_at": "2025-10-15 05:02:38",
          "issue_id": 822
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3502522338,
      "number": 819,
      "title": "user_request_timeout error",
      "body": "Hi Team, \n\nI am facing this error lot many times. Can you let me know what causes this and how to fix it\n\n<img width=\"315\" height=\"524\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e622ad76-e496-4a3c-8a4a-3e56cf94c6c9\" />",
      "state": "closed",
      "created_at": "2025-10-10 11:40:34",
      "updated_at": "2025-10-15 13:10:30",
      "closed_at": "2025-10-10 18:52:50",
      "author": {
        "id": 1073190,
        "username": "aqibmumtaz",
        "display_name": "aqibmumtaz",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3391843769,
          "body": "Thank you for the feedback! This is outside the scope of Spec Kit.\n",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 18:52:50",
          "updated_at": "2025-10-10 18:52:50",
          "issue_id": 819
        },
        {
          "id": 3406382434,
          "body": "Thanks, can you please let me know how to handle this error. any pointers will be helpful ",
          "author": {
            "id": 1073190,
            "username": "aqibmumtaz",
            "display_name": "aqibmumtaz",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 13:10:30",
          "updated_at": "2025-10-15 13:10:30",
          "issue_id": 819
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3502224383,
      "number": 818,
      "title": "pep8",
      "body": "hello,\n\nI dont know if this a spec kit or copilot issue.\nbut I would suggest to use pep8 by default.\n\nI see many indentation issues, in python files it may use tab is 4 spaces, while javascript uses 2 spaces\nissues open or closing ( ) [ ] { }\n",
      "state": "closed",
      "created_at": "2025-10-10 10:15:07",
      "updated_at": "2025-10-10 18:51:51",
      "closed_at": "2025-10-10 18:51:50",
      "author": {
        "id": 2140416,
        "username": "UndiFineD",
        "display_name": "UndiFineD",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3391839095,
          "body": "Thank you for the feedback. This is outside the scope of Spec Kit.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 18:51:51",
          "updated_at": "2025-10-10 18:51:51",
          "issue_id": 818
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3502143090,
      "number": 817,
      "title": "Errors in TOML parsing",
      "body": "Hi. I have errors :  \n                                                                                                                                                                               \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502 \u2716 [FileCommandLoader] Failed to parse TOML file /home/ajaxiis/PRJ/Go5_specify/.gemini/commands/speckit.plan.toml: Unknown escape character: 39 at row 18, col 213, pos 586:       \u2502\n\u2502    17:                                                                                                                                                                             \u2502\n\u2502    18> 1. **Setup**: Run `.specify/scripts/bash/setup-plan.sh --json` from repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. For single quotes in args like \u2502\n\u2502    \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").                                                                                  \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                             ^                                                                                                                                      \u2502\n\u2502    19:                                                                                                                                                                             \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502 \u2716 [FileCommandLoader] Failed to parse TOML file /home/ajaxiis/PRJ/Go5_specify/.gemini/commands/speckit.implement.toml: Unknown escape character: 39 at row 18, col 255, pos 610:  \u2502\n\u2502    17:                                                                                                                                                                             \u2502\n\u2502    18> 1. Run `.specify/scripts/bash/check-prerequisites.sh --json --require-tasks --include-tasks` from repo root and parse FEATURE_DIR and AVAILABLE_DOCS list. All paths must   \u2502\n\u2502    be absolute. For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").                                      \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                                                                       ^                                                                                            \u2502\n\u2502    19:                                                                                                                                                                             \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502 \u2716 [FileCommandLoader] Failed to parse TOML file /home/ajaxiis/PRJ/Go5_specify/.gemini/commands/speckit.clarify.toml: Unknown escape character: 39 at row 29, col 77, pos 1428:    \u2502\n\u2502    28:    - If JSON parsing fails, abort and instruct user to re-run `/speckit.specify` or verify feature branch environment.                                                      \u2502\n\u2502    29>    - For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").                                          \u2502\n\u2502                                                                                    ^                                                                                               \u2502\n\u2502    30:                                                                                                                                                                             \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502 \u2716 [FileCommandLoader] Failed to parse TOML file /home/ajaxiis/PRJ/Go5_specify/.gemini/commands/speckit.checklist.toml: Unknown escape character: 39 at row 39, col 77, pos 1739:  \u2502\n\u2502    38:    - All file paths must be absolute.                                                                                                                                       \u2502\n\u2502    39>    - For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").                                          \u2502\n\u2502                                                                                    ^                                                                                               \u2502\n\u2502    40:                                                                                                                                                                             \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502                                                                                                                                                                                    \u2502\n\u2502 \u2716 [FileCommandLoader] Failed to parse TOML file /home/ajaxiis/PRJ/Go5_specify/.gemini/commands/speckit.analyze.toml: Unknown escape character: 39 at row 37, col 72, pos 1899:    \u2502\n\u2502    36: Abort with an error message if any required file is missing (instruct the user to run missing prerequisite command).                                                        \u2502\n\u2502    37> For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").                                               \u2502\n\u2502                                                                               ^                                                                                                    \u2502\n\u2502    38:                                                                             \n\nPlease fix this bag.",
      "state": "closed",
      "created_at": "2025-10-10 09:51:06",
      "updated_at": "2025-10-10 18:52:23",
      "closed_at": "2025-10-10 18:52:11",
      "author": {
        "id": 213073405,
        "username": "ajaxiis-rust",
        "display_name": "ajaxiis-rust",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 4,
      "comments": [
        {
          "id": 3390260226,
          "body": "This appears to be a TOML parsing issue.  The sequence:\n\n```\n\"I'\\''m Groot\"\n```\n\nshould become:\n\n```\n\"I'\\\\''m Groot\"\n```",
          "author": {
            "id": 200352,
            "username": "apshoemaker",
            "display_name": "apshoemaker",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 13:50:29",
          "updated_at": "2025-10-10 13:50:29",
          "issue_id": 817
        },
        {
          "id": 3390352756,
          "body": "yep ran into the same thing, the above workaround fixes it",
          "author": {
            "id": 58891480,
            "username": "rob-mur",
            "display_name": "rob-mur",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 14:08:17",
          "updated_at": "2025-10-10 14:08:17",
          "issue_id": 817
        },
        {
          "id": 3391035621,
          "body": "same here",
          "author": {
            "id": 75339264,
            "username": "Giuseppe-Bianc",
            "display_name": "Giuseppe-Bianc",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 16:22:01",
          "updated_at": "2025-10-10 16:22:01",
          "issue_id": 817
        },
        {
          "id": 3391840821,
          "body": "Thank you for the report! This should be addressed with the latest release.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 18:52:10",
          "updated_at": "2025-10-10 18:52:23",
          "issue_id": 817
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3501690183,
      "number": 814,
      "title": "Qwen mode, script error, running 'implement' does not create actual file.",
      "body": "<img width=\"1571\" height=\"916\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/de90149e-70a4-4ce8-8ed2-7ae2a112fbc2\" />\n\nfix this syntax error, reload `qwen' but, all process done. last execute 'implement', no generation code file. No exists everythings.",
      "state": "closed",
      "created_at": "2025-10-10 07:22:29",
      "updated_at": "2025-10-10 19:35:02",
      "closed_at": "2025-10-10 19:35:02",
      "author": {
        "id": 36724511,
        "username": "gigascake",
        "display_name": "gigascake",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3392046426,
          "body": "Latest release fixes the TOML issue, thank you for reporting!",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:35:00",
          "updated_at": "2025-10-10 19:35:00",
          "issue_id": 814
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3501587482,
      "number": 813,
      "title": "Reload all context on new session",
      "body": "What is the way to reload all context on a new session? My workflow includes codex which has a limited context window, and when it's finished I need a new session. I feel like this new session is missing a lot of established ideas from the previous one and would like to find a way to not experience such a \"knowledge reset\" on every new session. I'm sorry if it's so obvious I'm missing it, but I would expect a command for this type of operation (/checkpoint and /loadcheckpoint or similar)",
      "state": "open",
      "created_at": "2025-10-10 06:41:07",
      "updated_at": "2025-10-10 06:41:07",
      "closed_at": null,
      "author": {
        "id": 6335213,
        "username": "iAbadia",
        "display_name": "iAbadia",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3501442208,
      "number": 812,
      "title": ".specify/scripts/powershell/ not added to auto approve",
      "body": "I observed that it seemed to add \n\n`\".specify/scripts/ps/\": true, `\n\nto the autoapprove, but it actually creates the powershell files in a dir called powershell, not ps. So it really should be\n\n`\".specify/scripts/powershell/\": true`",
      "state": "closed",
      "created_at": "2025-10-10 05:41:06",
      "updated_at": "2025-10-10 19:30:32",
      "closed_at": "2025-10-10 19:30:32",
      "author": {
        "id": 1323111,
        "username": "mcasalaina",
        "display_name": "mcasalaina",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3392025438,
          "body": "Fixed, thank you @mcasalaina!",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:30:30",
          "updated_at": "2025-10-10 19:30:30",
          "issue_id": 812
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3501439535,
      "number": 811,
      "title": "specify --version does not exist",
      "body": "The website says\n\n```\n# Install with uv (recommended)\nuv tool install specify-cli --from git+https://github.com/github/spec-kit.git\n\n# Verify installation\nspecify --version\n```\n\nBut specify --version doesn't actually work. specify --help does, though.",
      "state": "closed",
      "created_at": "2025-10-10 05:39:32",
      "updated_at": "2025-10-21 23:14:39",
      "closed_at": "2025-10-21 23:14:39",
      "author": {
        "id": 1323111,
        "username": "mcasalaina",
        "display_name": "mcasalaina",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [],
      "comment_count": 4,
      "comments": [
        {
          "id": 3391853879,
          "body": "@mcasalaina can you please add a link to the page that states the `--version` param? Happy to fix that.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 18:54:54",
          "updated_at": "2025-10-10 18:54:54",
          "issue_id": 811
        },
        {
          "id": 3392526925,
          "body": "This bug is actually not on this repo but on speckit.org, I should have specified that (that might be a different repo altogether). Here's a screenshot of it:\n\n<img width=\"2325\" height=\"840\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5c127711-f715-4563-8af8-cf89a7f0054d\" />",
          "author": {
            "id": 1323111,
            "username": "mcasalaina",
            "display_name": "mcasalaina",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 22:57:57",
          "updated_at": "2025-10-10 22:57:57",
          "issue_id": 811
        },
        {
          "id": 3393450208,
          "body": "That's actually a fun discovery @mcasalaina - that domain is not maintained by us.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 16:01:36",
          "updated_at": "2025-10-11 16:01:36",
          "issue_id": 811
        },
        {
          "id": 3396817615,
          "body": "Duplicate: https://github.com/github/spec-kit/issues/486",
          "author": {
            "id": 703248,
            "username": "agriffard",
            "display_name": "agriffard",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 10:18:59",
          "updated_at": "2025-10-13 10:18:59",
          "issue_id": 811
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3501346048,
      "number": 810,
      "title": "Can I use Spec Kit to specify, plan, create actionable task list, then implement using Firebase Studio?",
      "body": "Can I use Spec Kit to specify, plan, create actionable task list, then implement using Firebase Studio? Or it will be better to still use Spec Kit to implement but just deploye on Firebase?",
      "state": "open",
      "created_at": "2025-10-10 04:44:38",
      "updated_at": "2025-10-10 04:44:38",
      "closed_at": null,
      "author": {
        "id": 11897667,
        "username": "mubiesam",
        "display_name": "mubiesam",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3500801175,
      "number": 807,
      "title": "TOML parsing failed for multiple command files due to an invalid escape sequence",
      "body": " The TOML parser is failing to load several command definition files located in .gemini/commands/.\n\n  Error:\n  The parser reports an Unknown escape character: 39 error, which indicates an unescaped single quote (') inside a string.\n\n  Affected Files:\n  The issue is present in the following files:\n   - .gemini/commands/speckit.specify.toml\n   - .gemini/commands/speckit.implement.toml\n   - .gemini/commands/speckit.clarify.toml\n   - .gemini/commands/speckit.checklist.toml\n   - .gemini/commands/speckit.analyze.toml\n\n  Root Cause:\n  The error is caused by this line in each of the files:\n   1 For single quotes in args like \"I'm Groot\", use escape syntax: e.g 'I'\\''m Groot' (or double-quote if possible: \"I'm Groot\").\n  The substring \\' is not a valid escape sequence in the TOML string format.\n\n  Recommendation:\n  To fix this, the backslash itself needs to be escaped. The problematic part of the string should be changed from 'I'\\''m Groot' to 'I'\\\\''m Groot'.\n\n\n# About Gemini CLI\n\n| Property      | Value          |\n|---------------|----------------|\n| CLI Version   | 0.8.1          |\n| Git Commit    | a0987602       |\n| Model         | gemini-2.5-pro |\n| Sandbox       | no sandbox     |\n| OS            | linux          |\n| Auth Method   | OAuth\n",
      "state": "closed",
      "created_at": "2025-10-09 22:30:20",
      "updated_at": "2025-10-10 18:55:22",
      "closed_at": "2025-10-10 18:55:22",
      "author": {
        "id": 70923595,
        "username": "hooperits",
        "display_name": "hooperits",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 4,
      "comments": [
        {
          "id": 3388250984,
          "body": "\u6211\u4e5f\u662f\u9019\u500b\u554f\u984c\u3002",
          "author": {
            "id": 16394449,
            "username": "lostshin",
            "display_name": "lostshin",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 04:31:28",
          "updated_at": "2025-10-10 04:31:28",
          "issue_id": 807
        },
        {
          "id": 3388298650,
          "body": "related Issue: https://github.com/github/spec-kit/issues/797\nrelated PR: https://github.com/github/spec-kit/pull/808",
          "author": {
            "id": 853621,
            "username": "kenchou",
            "display_name": "kenchou",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 05:01:07",
          "updated_at": "2025-10-10 05:01:07",
          "issue_id": 807
        },
        {
          "id": 3388526387,
          "body": "`'I'\\''m Groot' should be 'I'\\\\''m Groot'`\n",
          "author": {
            "id": 12134516,
            "username": "xitex",
            "display_name": "xitex",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 06:46:47",
          "updated_at": "2025-10-10 06:48:09",
          "issue_id": 807
        },
        {
          "id": 3391856253,
          "body": "Latest release should include the changes, thank you for raising this!",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 18:55:21",
          "updated_at": "2025-10-10 18:55:21",
          "issue_id": 807
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3500576870,
      "number": 806,
      "title": "Brownfield project require more iterating / explicit technical guidance, makes spec messy with technical details",
      "body": "In using spec-kit against a very large and complex existing project (brownfield), the /plan was not sufficient - it generated seemingly reasonable defaults, but those with deep knowledge of the project provided architectural guidance that I had to stuff into the spec to then regenerate things. It would have been better is there was a stage and commands to help iterate on the architecture / technical requirements more explicitly (when needed) and not make the user spec messy with technical details. ",
      "state": "open",
      "created_at": "2025-10-09 20:44:14",
      "updated_at": "2025-10-20 07:56:18",
      "closed_at": null,
      "author": {
        "id": 142424318,
        "username": "neilfitzgerald1972",
        "display_name": "neilfitzgerald1972",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 4,
      "comments": [
        {
          "id": 3389135767,
          "body": "Great points.\nIt needs to understand the current project thoroughly before the next move. But there is no way to tell spec-kit the complete context.\nAlso, spec-kit lacks fluent communication with coders during each state.  It seems that it assumes that there is a perfect /specify existing based on which you can design the /plan and arrange the /tasks all at once.\nBut it is not the truth. During the real development, it needs a lot of re-think, re-plan and re-tasks.\nIn one word, Spec-it is better for product managers but not for coders.  \n",
          "author": {
            "id": 2143234,
            "username": "zhengger",
            "display_name": "zhengger",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 09:52:30",
          "updated_at": "2025-10-11 06:46:56",
          "issue_id": 806
        },
        {
          "id": 3398632371,
          "body": "I've also found it to get into context-seeking loops with things that aren't fully implemented or aren't perfectly implemented (green-ish field with some development already done, in my case). Instead of breaking out to ask, it just gets stuck in a loop. It works noticeably better for the very early planning/prototype stage, where no code exists yet.",
          "author": {
            "id": 579361,
            "username": "ShaunaGordon",
            "display_name": "ShaunaGordon",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-13 18:33:53",
          "updated_at": "2025-10-13 18:33:53",
          "issue_id": 806
        },
        {
          "id": 3420282937,
          "body": "not only technical details should be considered but the existing naming convention, design principles ,etc..",
          "author": {
            "id": 1411754,
            "username": "tianlinzx",
            "display_name": "tianlinzx",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 02:15:24",
          "updated_at": "2025-10-20 02:15:24",
          "issue_id": 806
        },
        {
          "id": 3420966677,
          "body": "@localden will you pick up this issue ?",
          "author": {
            "id": 1411754,
            "username": "tianlinzx",
            "display_name": "tianlinzx",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 07:56:18",
          "updated_at": "2025-10-20 07:56:18",
          "issue_id": 806
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3500044589,
      "number": 804,
      "title": "Support Claude Code Plugins",
      "body": "Anthropic just released plugins for claude code. \n\nTLDR plugins are a way to bundle commands + agents + hooks into a single package with a native installer built into Claude Code. \n\nhttps://www.anthropic.com/news/claude-code-plugins\n",
      "state": "open",
      "created_at": "2025-10-09 17:30:47",
      "updated_at": "2025-10-19 15:47:12",
      "closed_at": null,
      "author": {
        "id": 3860655,
        "username": "peterHoburg",
        "display_name": "peterHoburg",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 8,
      "comments": [
        {
          "id": 3392203694,
          "body": "Hey Peter, I just made this plugin for Claude Code directly from spec-kit....but haven't fully tested it. Let me know how it works for you. https://github.com/MartyBonacci/specswarm",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 20:19:32",
          "updated_at": "2025-10-10 20:19:32",
          "issue_id": 804
        },
        {
          "id": 3392231622,
          "body": "In Claude Code...\n\n/plugin marketplace add MartyBonacci/specswarm\u00a0\n\n/plugin install speckit",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 20:30:46",
          "updated_at": "2025-10-10 20:30:46",
          "issue_id": 804
        },
        {
          "id": 3392680997,
          "body": "Just made an update to the Claude Code plugin. I missed that the scripts got dropped from the plugin. Modified the commands to handle the operations that the scripts were doing.",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 00:43:41",
          "updated_at": "2025-10-11 00:43:41",
          "issue_id": 804
        },
        {
          "id": 3407228378,
          "body": "I am migrating Gemini extensions to Claude Code plugins, including Spec-kit.\n\nhttps://plugins.pleaseai.dev/?install=spec-kit",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-15 16:06:15",
          "updated_at": "2025-10-15 16:06:15",
          "issue_id": 804
        },
        {
          "id": 3411128475,
          "body": "@amondnet , is pleaseai.dev your marketplace? Are you the owner?\nIt has a lot of great plugins in it.",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-16 14:16:49",
          "updated_at": "2025-10-16 14:17:20",
          "issue_id": 804
        },
        {
          "id": 3413700827,
          "body": "Any official plug-in released from spec-kit yet??",
          "author": {
            "id": 9297622,
            "username": "grhaonan",
            "display_name": "grhaonan",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 03:38:05",
          "updated_at": "2025-10-17 03:38:05",
          "issue_id": 804
        },
        {
          "id": 3413778960,
          "body": "@grhaonan it was progressing so slow that I just made my own Claude Code plugin based on spec-kit https://github.com/MartyBonacci/specswarm",
          "author": {
            "id": 29366334,
            "username": "MartyBonacci",
            "display_name": "MartyBonacci",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-17 04:08:31",
          "updated_at": "2025-10-17 04:08:31",
          "issue_id": 804
        },
        {
          "id": 3419758401,
          "body": "https://www.notion.so/notiondevs/Notion-Skills-for-Claude-28da4445d27180c7af1df7d8615723d0\n\n> ### Spec to Implementation \ud83d\ude80\n> \n> Turns product or tech specs into concrete Notion tasks that Claude Code can implement. Breaks down spec pages into detailed implementation plans with clear tasks, acceptance criteria, and progress tracking to guide development from requirements to completion.\n\n[notion-spec-to-implementation.zip](https://github.com/user-attachments/files/22991048/notion-spec-to-implementation.zip)",
          "author": {
            "id": 1964421,
            "username": "amondnet",
            "display_name": "amondnet",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 15:43:39",
          "updated_at": "2025-10-19 15:47:12",
          "issue_id": 804
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3499668522,
      "number": 803,
      "title": "\ud83e\udde9 Clarify context isolation and cleanup strategy in Spec-Kit",
      "body": "**Summary**\n\nI\u2019m using Spec-Kit to manage multiple specs (e.g. 001-login-page, 002-dashboard, 003-export-data).\nIt works well with Spec-Kit-aware tools like Claude Code, but I\u2019m unsure how context is handled when mixing tools or deleting completed specs.\n\n**Questions**\n\nIf I use Spec-Kit in Claude Code but also work with Codex or Cursor, will those tools still load all spec files by default? Could that cause conflicting or outdated context?\n\nAfter a spec is completed, can I safely delete its spec.md, plan.md, and tasks.md files \u2014 or should I move them to _archive/ or mark them as DEPRECATED?",
      "state": "open",
      "created_at": "2025-10-09 15:39:21",
      "updated_at": "2025-10-09 15:40:43",
      "closed_at": null,
      "author": {
        "id": 141604228,
        "username": "mason-aug",
        "display_name": "mason-aug",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3499489105,
      "number": 801,
      "title": "Serialization error in aiserver.v1.StreamUnifiedChatRequestWithTools",
      "body": "Request ID: c2634b4c-8e0c-4dea-94a1-d8fa5ee75953\nConnectError: [internal] Serialization error in aiserver.v1.StreamUnifiedChatRequestWithTools\n    at vscode-file://vscode-app/d:/cursor/cursor/resources/app/out/vs/workbench/workbench.desktop.main.js:7347:369901",
      "state": "closed",
      "created_at": "2025-10-09 14:43:42",
      "updated_at": "2025-10-10 18:55:35",
      "closed_at": "2025-10-10 18:55:35",
      "author": {
        "id": 50696134,
        "username": "70pice",
        "display_name": "70pice",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3498965232,
      "number": 798,
      "title": "BUG - Cursor CLI - I understand the instructions, but I still don't see the actual feature description that should replace $ARGUMENTS.",
      "body": "I installed uv on macOs and init a project with the Cursor CLI.\n\nThe /speckit.constituion works but he /speckit.specify doesn't.\n\nAs I see, cursor-agent sends \"/speckit.specify $ARGUMENTS\" with $ARGUMENTS instead of the text, even with or without quotes for the text.",
      "state": "open",
      "created_at": "2025-10-09 12:29:22",
      "updated_at": "2025-10-09 14:08:13",
      "closed_at": null,
      "author": {
        "id": 47207511,
        "username": "MaxBarbet",
        "display_name": "MaxBarbet",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 1,
      "comments": [
        {
          "id": 3386049803,
          "body": "$ARGUMENTS should be replaced with text you put after a /speckit.specify within your chat session. \n\nTo see details on how the commands works, address cursor documentation - https://cursor.com/docs/agent/chat/commands#parameters",
          "author": {
            "id": 81954928,
            "username": "outp1",
            "display_name": "outp1",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 14:08:13",
          "updated_at": "2025-10-09 14:08:13",
          "issue_id": 798
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3498947417,
      "number": 797,
      "title": "Slash commands not discovered in Gemini/Codex/Qwen (only speckit.constitution visible), while Claude Code shows all",
      "body": "## Summary\n\nWhen using Spec-Kit with Gemini CLI and Codex CLI, only the command speckit.constitution is discovered in the slash menu. Other core commands such as speckit.specify, speckit.plan, speckit.tasks, and speckit.implement are not shown, making it impossible to run the full Spec-Kit workflow with these tools.\nIn contrast, Claude Code correctly discovers and runs the full set of /speckit.* commands in the same project.\n\n## Output\n\ngemini & qwen ...\n\n``` bash\n> /speckit.implement\n\n\u2715 Unknown command: /speckit.implement\n```\n\n## Environment\n``` bash\n\uf8ff ~/ uv tool list\nspecify-cli v0.0.18\n\uf8ff ~/ gemini --version\n0.8.1\n\uf8ff ~/ codex --version\ncodex-cli 0.46.0\n\uf8ff ~/ claude --version\n2.0.11 (Claude Code)\n\uf8ff ~/ qwen --version\n0.0.14\n```\n\n",
      "state": "closed",
      "created_at": "2025-10-09 12:24:13",
      "updated_at": "2025-10-10 19:34:12",
      "closed_at": "2025-10-10 19:34:12",
      "author": {
        "id": 78343795,
        "username": "Scoheart",
        "display_name": "Scoheart",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 7,
      "comments": [
        {
          "id": 3386091837,
          "body": "There could be a problem with how you initialized spec-kit. \n\nStart a new project and initialyze spec-kit choosing claude code as a code agent.\n\nThen you need to check output of the `ls -a .claude/commands/` command ran from your project directory. If commands files are there, problem is likely to be with your code agent tool.\n\n",
          "author": {
            "id": 81954928,
            "username": "outp1",
            "display_name": "outp1",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 14:17:17",
          "updated_at": "2025-10-09 14:17:17",
          "issue_id": 797
        },
        {
          "id": 3386150451,
          "body": "Copy the commands below the existing normal .qwen\\commands to the .qwen\\commands of the newly created project, and start the qwen cli to see the commands",
          "author": {
            "id": 556714,
            "username": "bailiangcn",
            "display_name": "bailiangcn",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 14:28:38",
          "updated_at": "2025-10-09 14:28:38",
          "issue_id": 797
        },
        {
          "id": 3386226824,
          "body": "I have the same problem in gemini / copilot",
          "author": {
            "id": 4850809,
            "username": "frizikk",
            "display_name": "frizikk",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 15:09:24",
          "updated_at": "2025-10-09 15:09:24",
          "issue_id": 797
        },
        {
          "id": 3387604436,
          "body": "Similar problem for me, no commands are discovered in VS code in new project.",
          "author": {
            "id": 24924432,
            "username": "lisovyk",
            "display_name": "lisovyk",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 21:56:52",
          "updated_at": "2025-10-09 21:56:52",
          "issue_id": 797
        },
        {
          "id": 3387690995,
          "body": "Gemini slash commands are failing because `\\` in the generated TOML files are not escaped.\n\nQuick workaround: replace `\\` to `\\\\` in .gemini/commands/*.toml",
          "author": {
            "id": 80679430,
            "username": "hsin19",
            "display_name": "hsin19",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 22:35:57",
          "updated_at": "2025-10-09 22:35:57",
          "issue_id": 797
        },
        {
          "id": 3390785992,
          "body": "This was cause in in my case. \nChanging from \\'' to \\\\' in .toml files solved it. ",
          "author": {
            "id": 769695,
            "username": "svrhovac",
            "display_name": "svrhovac",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 15:30:39",
          "updated_at": "2025-10-10 15:30:39",
          "issue_id": 797
        },
        {
          "id": 3392042506,
          "body": "Latest release fixes the TOML issue, so it should work.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:34:10",
          "updated_at": "2025-10-10 19:34:10",
          "issue_id": 797
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3498739252,
      "number": 796,
      "title": "Consider pulling the specify CLI and installation flow into a separate reusable project",
      "body": "After using spec-kit for a bit, I find myself wanting to reuse some of its functionality for things that are not exactly spec-kit. I want to come up with my own reusable workflows and slash commands to solve different problems. But, how do I make those available for others to easily consume?\n\nWhat I propose is that the `specify` CLI can actually serve a much broader community need than it is today as just a piece of spec-kit. It's a cross-platform, cross-agent CLI that knows how to install extensions (or kits?) to Cursor, Claude, Copilot, etc. That's valuable, and something other \"kits\" could use to start building more of a real extension system in this area. It should morph into a tool that could be pointed at any \"kit\" repository to install that kit into an agent. Make it easier for users to curate and share a set of workflows with each other, even if they're using different coding assistants or on different operating systems. And, as a separate project, it can get more eyes on some of the not-yet-implemented things here like handling versioning of kits, upgrades, rollbacks, discovery, and so on.\n\nThis would then leave this repository, spec-kit, as just the kit workflow itself. The slash commands and prompts can then be versioned and iterated on independently of the way we install and lifecycle kits.\n\nHere's an example of the proposed new flow, generically usable for multiple kits. To avoid confusion with the existing CLI in the example and also avoid coming up with a new name for this more generically useful CLI, I refer to it below as `specify2`.\n\n```\nuv tool install specify2-cli --from git+https://github.com/github/specify2.git\n\n# We still init once per project, to either create a new project folder\n# or from within an existing one\nspecify2 init <PROJECT_NAME>\nspecify2 check\n\n# Now, install the kits we actually want to use in this project\n\n# Install spec-kit as our first kit\nspecify2 install https://github.com/github/spec-kit\n\n# Install acme-pr-review-kit as my company's approved PR review workflow\nspecify2 install https://github.com/acmecorp/acme-pr-review-kit\n\n# List installed kits\nspecify2 list\n\n# Upgrade installed kits to latest stable release\nspecify2 upgrade\n```\n\nThese are just simple examples, not fully-formed, and obviously not the right CLI name.\n\nWith this change, there would likely need to be some small amount of metadata or at least documented locations expected for each kit repo so that the CLI knows what to do with each file in the kit repo. We'd want this to be able to handle slash commands, subagents (in Claude land, and equivalent in others), helper scripts, and potentially other things in the future. The existing slash command templates in spec-kit would likely need to morph to adjust to a new convention for the helper script locations, depending on how the current `.specify` directory in the project morphs to account for multiple installed kits and ensuring their commands can find their respective helper scripts.",
      "state": "open",
      "created_at": "2025-10-09 11:22:02",
      "updated_at": "2025-10-20 12:35:38",
      "closed_at": null,
      "author": {
        "id": 56071,
        "username": "bbrowning",
        "display_name": "bbrowning",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3419252498,
          "body": "Aaaaand we're off to the races, inheriting recursive dependencies as external \"kits\" of commands/templates/specs. Next we'll need a fully-featured spec package manager. \ud83d\ude06 Interesting idea though, I don't mean to criticize!",
          "author": {
            "id": 14172904,
            "username": "csveritas",
            "display_name": "csveritas",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-19 06:20:16",
          "updated_at": "2025-10-19 06:20:16",
          "issue_id": 796
        },
        {
          "id": 3421883264,
          "body": "Note that I opened this before Claude Code announced their plugin system, and that plugin system is an example of what the separate reusable project I'm recommending here would do. The difference is Claude Code plugins are specific to Claude Code, but many of the concepts could be applied across coding assistants if there was an ecosystem to discover, install, and manage such plugins agnostic to any one coding assistant.",
          "author": {
            "id": 56071,
            "username": "bbrowning",
            "display_name": "bbrowning",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-20 12:35:38",
          "updated_at": "2025-10-20 12:35:38",
          "issue_id": 796
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3498265881,
      "number": 793,
      "title": "Duplicate `.specify` path in `plan` command after initialization",
      "body": "When I run the initialization command:\n\n```bash\nspecify init --here --ai claude\n```\n\nThe generated `plan` command markdown document has an incorrect file path in one of its lines.\nAs shown in the screenshot, it contains a duplicated `.specify` prefix:\n\n```\n.specify.specify/memory/constitution.md\n```\n\nIt should instead be:\n\n```\n.specify/memory/constitution.md\n```\n\n**Steps to Reproduce:**\n\n1. Run `specify init --here --ai claude`.\n2. Open the generated plan markdown file.\n3. Check the line referencing `constitution.md`.\n\n**Expected Result:**\nPath should be `.specify/memory/constitution.md`.\n\n**Actual Result:**\nPath incorrectly appears as `.specify.specify/memory/constitution.md`.\n",
      "state": "closed",
      "created_at": "2025-10-09 09:01:02",
      "updated_at": "2025-10-11 01:29:48",
      "closed_at": "2025-10-10 19:28:39",
      "author": {
        "id": 92089059,
        "username": "lyzno1",
        "display_name": "lyzno1",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 2,
      "comments": [
        {
          "id": 3392017028,
          "body": "This is fixed in latest release. Thank you for the report!",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:28:37",
          "updated_at": "2025-10-10 19:28:37",
          "issue_id": 793
        },
        {
          "id": 3392718384,
          "body": "> This is fixed in latest release. Thank you for the report!\n\n<img width=\"1000\" height=\"58\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bc62fd2a-c590-4abe-b813-619074eb0fc4\" />\nThis issue persists even after I get the latest release @localden ",
          "author": {
            "id": 92089059,
            "username": "lyzno1",
            "display_name": "lyzno1",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-11 01:29:48",
          "updated_at": "2025-10-11 01:29:48",
          "issue_id": 793
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3497521561,
      "number": 792,
      "title": "issue",
      "body": "only 1  command /speckit.constitution en gemini cli",
      "state": "closed",
      "created_at": "2025-10-09 03:37:55",
      "updated_at": "2025-10-10 19:28:12",
      "closed_at": "2025-10-10 19:28:12",
      "author": {
        "id": 126358359,
        "username": "kirprong",
        "display_name": "kirprong",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [
        {
          "id": 53200638,
          "username": "localden",
          "display_name": "localden",
          "avatar_url": null,
          "role": "none",
          "is_bot": false
        }
      ],
      "labels": [],
      "comment_count": 7,
      "comments": [
        {
          "id": 3384050003,
          "body": "same with qwen",
          "author": {
            "id": 629122,
            "username": "saighost",
            "display_name": "saighost",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 04:13:14",
          "updated_at": "2025-10-09 04:13:14",
          "issue_id": 792
        },
        {
          "id": 3384138676,
          "body": "so far the command only available in copilot. I tested  in qwen and gemini, no other command other than constitution ",
          "author": {
            "id": 112086,
            "username": "int2k",
            "display_name": "int2k",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 05:09:37",
          "updated_at": "2025-10-09 05:09:37",
          "issue_id": 792
        },
        {
          "id": 3384219914,
          "body": "the issue seems caused by \n\n`\n'I'\\''m Groot'\n`",
          "author": {
            "id": 112086,
            "username": "int2k",
            "display_name": "int2k",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 05:46:31",
          "updated_at": "2025-10-09 05:46:31",
          "issue_id": 792
        },
        {
          "id": 3384915364,
          "body": "only constitution command in gemini cli how to fix this?",
          "author": {
            "id": 12134516,
            "username": "xitex",
            "display_name": "xitex",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 09:10:41",
          "updated_at": "2025-10-09 09:10:41",
          "issue_id": 792
        },
        {
          "id": 3385122971,
          "body": "Following the instructions in #788 to remove the `I'm Groot` single quoting instructions from all of the `.gemini/speckit.xxx.toml` file worked for me. ",
          "author": {
            "id": 585546,
            "username": "colinbull",
            "display_name": "colinbull",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-09 10:04:54",
          "updated_at": "2025-10-09 10:05:06",
          "issue_id": 792
        },
        {
          "id": 3388528201,
          "body": "`'I'\\''m Groot' should be 'I'\\\\''m Groot'`",
          "author": {
            "id": 12134516,
            "username": "xitex",
            "display_name": "xitex",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 06:47:22",
          "updated_at": "2025-10-10 06:47:45",
          "issue_id": 792
        },
        {
          "id": 3392015252,
          "body": "<img width=\"3426\" height=\"913\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/386e82ff-6adf-401c-aa55-5ec3af4593a6\" />\n\nLatest release should fix this for Gemini and Qwen.",
          "author": {
            "id": 53200638,
            "username": "localden",
            "display_name": "localden",
            "avatar_url": null,
            "role": "none",
            "is_bot": false
          },
          "created_at": "2025-10-10 19:28:12",
          "updated_at": "2025-10-10 19:28:12",
          "issue_id": 792
        }
      ],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    },
    {
      "id": 3497267625,
      "number": 790,
      "title": "Mono-repo support",
      "body": "Seeing errors like:\n\nERROR: Template file not found at C:\\my\\repo\\.specify\\templates\\plan-template.md\n\nand\n\nERROR: Template file not found at C:\\my\\repo\\.specify\\templates\\agent-file-template.md\nINFO: Run specify init to scaffold .specify/templates, or add agent-file-template.md there.\n\nThis is because we have lots of projects in a single repo.  All the files paths are assuming .specify is directly under Get-RepoRoot. but if we have installed spec-kit in a subfolder of the repo root, it has no way to find them.\n\nThe reason for installing spec-kit into the subfolder not the root is to have a constitution file per project.\n\nif the scripts accepted an optional parameter that can be appended onto the repo root to locate the templates, this would solve this problem.",
      "state": "open",
      "created_at": "2025-10-09 00:38:46",
      "updated_at": "2025-10-13 07:08:48",
      "closed_at": null,
      "author": {
        "id": 17135163,
        "username": "ryancaille",
        "display_name": "ryancaille",
        "avatar_url": null,
        "role": "none",
        "is_bot": false
      },
      "assignees": [],
      "labels": [],
      "comment_count": 0,
      "comments": [],
      "reactions": {
        "total_count": 0,
        "plus_one": 0,
        "minus_one": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "milestone": null,
      "is_pull_request": false
    }
  ],
  "metrics": {
    "total_issues_analyzed": 100,
    "issues_matching_filters": 100,
    "average_comment_count": 1.6,
    "comment_distribution": {
      "0-5": 94,
      "6-10": 6,
      "11+": 0
    },
    "top_labels": [
      {
        "label_name": "enhancement",
        "count": 12
      },
      {
        "label_name": "needs-author-response",
        "count": 5
      },
      {
        "label_name": "templates",
        "count": 4
      },
      {
        "label_name": "needs-verification",
        "count": 4
      },
      {
        "label_name": "documentation",
        "count": 2
      },
      {
        "label_name": "new-agent",
        "count": 1
      }
    ],
    "activity_by_month": {
      "2025-10": 100
    },
    "activity_by_week": {
      "2025-W40": 29,
      "2025-W41": 49,
      "2025-W42": 22
    },
    "activity_by_day": {
      "2025-10-09": 11,
      "2025-10-10": 10,
      "2025-10-11": 8,
      "2025-10-12": 7,
      "2025-10-13": 8,
      "2025-10-14": 9,
      "2025-10-15": 7,
      "2025-10-16": 5,
      "2025-10-17": 7,
      "2025-10-18": 6,
      "2025-10-19": 3,
      "2025-10-20": 10,
      "2025-10-21": 8,
      "2025-10-22": 1
    },
    "most_active_users": [
      {
        "username": "localden",
        "issues_created": 0,
        "comments_made": 29,
        "role": "contributor"
      },
      {
        "username": "MartyBonacci",
        "issues_created": 1,
        "comments_made": 9,
        "role": "contributor"
      },
      {
        "username": "amondnet",
        "issues_created": 0,
        "comments_made": 6,
        "role": "contributor"
      },
      {
        "username": "foertel",
        "issues_created": 0,
        "comments_made": 6,
        "role": "contributor"
      },
      {
        "username": "harikrishnan83",
        "issues_created": 1,
        "comments_made": 4,
        "role": "contributor"
      }
    ],
    "average_issue_resolution_time": 1.0975436507936507
  }
}